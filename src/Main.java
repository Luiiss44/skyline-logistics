import java.util.Scanner;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Clase principal que inicia el juego de log√≠stica
 */
public class Main {
    private static final String[] PROVINCIAS = {
        "Madrid", "Barcelona", "Valencia", "Sevilla", "Zaragoza",
        "M√°laga", "Murcia", "Palma de Mallorca", "Las Palmas", "Bilbao",
        "Alicante", "C√≥rdoba", "Valladolid", "Vigo", "Gij√≥n"
    };

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean salir = false;

        while (!salir) {
            System.out.println("\n==============================================");
            System.out.println("üéÆ MEN√ö PRINCIPAL");
            System.out.println("==============================================");
            System.out.println("01. Nueva partida");
            System.out.println("02. Cargar partida");
            System.out.println("03. Ver hist√≥rico de jugadores");
            System.out.println("98. Cr√©ditos");
            System.out.println("99. Salir del juego");
            System.out.print("\nSeleccione una opci√≥n: ");

            String opcion = scanner.nextLine();

            switch (opcion) {
                case "01":
                case "1":
                    iniciarNuevaPartida();
                    break;
                case "02":
                case "2":
                    cargarPartida();
                    break;
                case "03":
                case "3":
                    mostrarHistoricoJugadores();
                    break;
                case "98":
                    mostrarCreditos();
                    break;
                case "99":
                    salir = true;
                    System.out.println("\nüëã ¬°Gracias por jugar a Skyline Logistics!");
                    break;
                default:
                    System.out.println("\n‚ùå Opci√≥n no v√°lida");
            }
        }
        scanner.close();
    }
    
    /**
     * Permite al usuario seleccionar la provincia
     * @param scanner Scanner para entrada de usuario
     * @return String con la provincia seleccionada
     */
    private static String seleccionarProvincia(Scanner scanner) {
        System.out.println("\nüåç SELECCIONA UNA CIUDAD:");
        
        // Mostrar provincias en 3 columnas
        int columnas = 3;
        int filas = (int) Math.ceil((double) PROVINCIAS.length / columnas);
        
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                int indice = i + j * filas;
                if (indice < PROVINCIAS.length) {
                    System.out.printf("%02d. %-20s", indice + 1, PROVINCIAS[indice]);
                }
            }
            System.out.println();
        }
        
        System.out.print("\nOpci√≥n: ");
        try {
            int opcion = Integer.parseInt(scanner.nextLine());
            if (opcion >= 1 && opcion <= PROVINCIAS.length) {
                return PROVINCIAS[opcion - 1];
            }
        } catch (NumberFormatException e) {
            // Si la entrada no es un n√∫mero, continuamos con el valor por defecto
        }
        
        System.out.println("‚ùå Opci√≥n no v√°lida, seleccionando Madrid por defecto");
        return "Madrid";
    }
    
    /**
     * Permite al usuario seleccionar la dificultad
     * @param scanner Scanner para entrada de usuario
     * @return String con la dificultad seleccionada
     */
    private static String seleccionarDificultad(Scanner scanner) {
        System.out.println("\nüéÆ SELECCIONA LA DIFICULTAD:");
        System.out.println("01. F√°cil");
        System.out.println("02. Medio");
        System.out.println("03. Dif√≠cil");
        System.out.print("\nOpci√≥n: ");
        
        String opcion = scanner.nextLine();
        switch (opcion) {
            case "01":
            case "1":
                return "easy";
            case "02":
            case "2":
                return "medium";
            case "03":
            case "3":
                return "hard";
            default:
                System.out.println("‚ùå Opci√≥n no v√°lida, seleccionando Medio por defecto");
                return "medium";
        }
    }

    /**
     * Permite al usuario seleccionar el modo de juego
     * @param scanner Scanner para entrada de usuario
     * @return String con el modo de juego seleccionado
     */
    private static String seleccionarModoJuego(Scanner scanner) {
        String modoSeleccionado = null;
        
        while (modoSeleccionado == null) {
            System.out.println("\nüéÆ SELECCIONA EL MODO DE JUEGO:");
            System.out.println("01. Modo Libre - Sin restricciones de tiempo ni recursos");
            System.out.println("02. Modo Desaf√≠o - Gesti√≥n de recursos limitados");
            System.out.println("03. Modo Campa√±a - Completa objetivos espec√≠ficos (99. Para ver objetivos)");
            System.out.print("\nOpci√≥n: ");
            
            String opcion = scanner.nextLine();
            switch (opcion) {
                case "01":
                case "1":
                    modoSeleccionado = "libre";
                    break;
                case "02":
                case "2":
                    modoSeleccionado = "desafio";
                    break;
                case "03":
                case "3":
                    modoSeleccionado = "campa√±a";
                    break;
                case "99":
                    mostrarObjetivosCampa√±a();
                    System.out.println("\nPresiona Enter para volver a la selecci√≥n de modo...");
                    scanner.nextLine();
                    break;
                default:
                    System.out.println("‚ùå Opci√≥n no v√°lida. Por favor, selecciona una opci√≥n v√°lida.");
                    break;
            }
        }
        
        if (modoSeleccionado.equals("campa√±a")) {
            mostrarObjetivosCampa√±a();
        }
        
        return modoSeleccionado;
    }

    /**
     * Muestra los objetivos del Modo Campa√±a seg√∫n la dificultad
     */
    private static void mostrarObjetivosCampa√±a() {
        System.out.println("\n=== üéØ OBJETIVOS DE LA CAMPA√ëA üéØ ===");
        System.out.println("Para completar la campa√±a, deber√°s alcanzar las siguientes estad√≠sticas:");
        System.out.println("\nüìä OBJETIVOS M√çNIMOS:");
        System.out.println("‚Ä¢ D√≠as jugados: 30");
        System.out.println("‚Ä¢ Env√≠os exitosos: 50");
        System.out.println("‚Ä¢ Satisfacci√≥n de clientes: 80%");
        System.out.println("‚Ä¢ Beneficios acumulados: 100,000‚Ç¨");
        
        System.out.println("\nüèÜ OBJETIVOS AVANZADOS:");
        System.out.println("‚Ä¢ D√≠as jugados: 60");
        System.out.println("‚Ä¢ Env√≠os exitosos: 100");
        System.out.println("‚Ä¢ Satisfacci√≥n de clientes: 90%");
        System.out.println("‚Ä¢ Beneficios acumulados: 250,000‚Ç¨");
        
        System.out.println("\nüåü OBJETIVOS √âLITE:");
        System.out.println("‚Ä¢ D√≠as jugados: 100");
        System.out.println("‚Ä¢ Env√≠os exitosos: 200");
        System.out.println("‚Ä¢ Satisfacci√≥n de clientes: 95%");
        System.out.println("‚Ä¢ Beneficios acumulados: 500,000‚Ç¨");
        
        System.out.println("\n‚ö†Ô∏è NOTA: Los objetivos se ajustar√°n seg√∫n la dificultad seleccionada.");
        System.out.println("   - F√°cil: 80% de los objetivos");
        System.out.println("   - Medio: 100% de los objetivos");
        System.out.println("   - Dif√≠cil: 120% de los objetivos");
    }

    private static void mostrarHistoricoJugadores() {
        try {
            File archivo = new File("historico_jugadores.txt");
            if (!archivo.exists()) {
                System.out.println("\nüìä No hay registros de jugadores a√∫n");
                System.out.println("\nEscribe 0 para volver al men√∫ principal...");
                new Scanner(System.in).nextLine();
                return;
            }

            BufferedReader br = new BufferedReader(new FileReader(archivo));
            Map<String, List<JugadorHistorico>> jugadoresPorModo = new HashMap<>();
            String linea;

            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split("\\|");
                if (datos.length == 11) {
                    String modo = datos[0];
                    String nombre = datos[1];
                    int dias = Integer.parseInt(datos[2]);
                    int dinero = Integer.parseInt(datos[3]);
                    int envios = Integer.parseInt(datos[4]);
                    int satisfaccion = Integer.parseInt(datos[5]);
                    int beneficios = Integer.parseInt(datos[6]);
                    String fechaInicio = datos[7];
                    String fechaFin = datos[8];
                    String dificultad = datos[9];
                    String ciudad = datos[10];

                    JugadorHistorico jugador = new JugadorHistorico(nombre, dias, dinero, envios, satisfaccion, beneficios, fechaInicio, fechaFin, dificultad, ciudad);
                    jugadoresPorModo.computeIfAbsent(modo, k -> new ArrayList<>()).add(jugador);
                }
            }
            br.close();

            // Mostrar Top 5 para cada modo
            for (Map.Entry<String, List<JugadorHistorico>> entry : jugadoresPorModo.entrySet()) {
                String modo = entry.getKey();
                List<JugadorHistorico> jugadores = entry.getValue();

                // Ordenar por dificultad (descendente) y luego por dinero (descendente)
                jugadores.sort((j1, j2) -> {
                    int comparacionDificultad = obtenerPesoDificultad(j2.dificultad) - obtenerPesoDificultad(j1.dificultad);
                    if (comparacionDificultad != 0) {
                        return comparacionDificultad;
                    }
                    return j2.dinero - j1.dinero;
                });

                System.out.println("\n" + "=".repeat(50));
                System.out.println("üèÜ TOP 5 - MODO " + modo.toUpperCase() + " üèÜ");
                System.out.println("=".repeat(50));
                
                for (int i = 0; i < Math.min(5, jugadores.size()); i++) {
                    JugadorHistorico j = jugadores.get(i);
                    System.out.println("\nü•á POSICI√ìN " + (i + 1));
                    System.out.println("üë§ Jugador: " + j.nombre);
                    System.out.println("üåç Ciudad: " + j.ciudad);
                    System.out.println("üéÆ Dificultad: " + obtenerEmojiDificultad(j.dificultad) + " " + j.dificultad.toUpperCase());
                    System.out.println("üìÖ D√≠as jugados: " + j.dias);
                    System.out.println("üí∞ Balance final: " + j.dinero + "‚Ç¨");
                    System.out.println("üì¶ Env√≠os exitosos: " + j.envios);
                    System.out.println("üòä Satisfacci√≥n: " + j.satisfaccion + "%");
                    System.out.println("üíµ Beneficios: " + j.beneficios + "‚Ç¨");
                    System.out.println("‚è∞ Duraci√≥n: " + j.fechaInicio + " ‚Üí " + j.fechaFin);
                    System.out.println("-".repeat(50));
                }
            }

            System.out.println("\nEscribe 0 para volver al men√∫ principal...");
            new Scanner(System.in).nextLine();

        } catch (IOException e) {
            System.out.println("\n‚ùå Error al leer el hist√≥rico: " + e.getMessage());
            System.out.println("\nEscribe 0 para volver al men√∫ principal...");
            new Scanner(System.in).nextLine();
        }
    }

    private static class JugadorHistorico {
        String nombre;
        int dias;
        int dinero;
        int envios;
        int satisfaccion;
        int beneficios;
        String fechaInicio;
        String fechaFin;
        String dificultad;
        String ciudad;

        public JugadorHistorico(String nombre, int dias, int dinero, int envios, int satisfaccion, int beneficios, String fechaInicio, String fechaFin, String dificultad, String ciudad) {
            this.nombre = nombre;
            this.dias = dias;
            this.dinero = dinero;
            this.envios = envios;
            this.satisfaccion = satisfaccion;
            this.beneficios = beneficios;
            this.fechaInicio = fechaInicio;
            this.fechaFin = fechaFin;
            this.dificultad = dificultad;
            this.ciudad = ciudad;
        }
    }

    private static int obtenerPesoDificultad(String dificultad) {
        switch (dificultad.toLowerCase()) {
            case "hard":
                return 3;
            case "medium":
                return 2;
            case "easy":
                return 1;
            default:
                return 0;
        }
    }

    private static String obtenerEmojiDificultad(String dificultad) {
        switch (dificultad.toLowerCase()) {
            case "hard":
                return "üî•";
            case "medium":
                return "‚ö°";
            case "easy":
                return "‚≠ê";
            default:
                return "‚ùì";
        }
    }

    private static void iniciarNuevaPartida() {
        Scanner scanner = new Scanner(System.in);
        
        // Mostrar men√∫ de bienvenida
        System.out.println("\n==============================================");
        System.out.println("üöö BIENVENIDO A SKYLINE LOGISTICS");
        System.out.println("==============================================");
        
        // Mostrar instrucciones
        System.out.println("\nüìñ INSTRUCCIONES DEL JUEGO:");
        System.out.println("üöö Skyline Logistics es un juego de gesti√≥n de pedidos donde tu objetivo es");
        System.out.println("   administrar una empresa de log√≠stica en Espa√±a. Cada d√≠a que pasa, el");
        System.out.println("   volumen de pedidos aumenta, poniendo a prueba tu capacidad de gesti√≥n.");
        System.out.println("\nüéØ CARACTER√çSTICAS PRINCIPALES:");
        System.out.println("‚Ä¢ üöó Gestiona una flota de veh√≠culos limitada");
        System.out.println("‚Ä¢ üì¶ Diferentes tipos de veh√≠culos para diferentes tipos de carga");
        System.out.println("‚Ä¢ üåç Pedidos a diferentes provincias de Espa√±a");
        System.out.println("‚Ä¢ üí∞ Costes variables seg√∫n la distancia");
        System.out.println("‚Ä¢ üõí Sistema de compra de veh√≠culos");
        System.out.println("‚Ä¢ ‚ö†Ô∏è Gesti√≥n de incidentes y mantenimiento");
        System.out.println("‚Ä¢ üìù Sistema de impuestos y multas");
        System.out.println("\n‚ùÑÔ∏è TIPOS DE CARGA ESPECIAL:");
        System.out.println("‚Ä¢ üßä REFRIGERADO: Requiere veh√≠culos con refrigeraci√≥n");
        System.out.println("‚Ä¢ ‚ùÑÔ∏è CONGELADO: Necesita veh√≠culos con congelaci√≥n");
        System.out.println("‚Ä¢ ‚ö†Ô∏è PELIGROSO: Requiere veh√≠culos especiales");
        System.out.println("‚Ä¢ üëÆ ESCOLTADO: Necesita escolta de seguridad");
        System.out.println("‚Ä¢ üéØ FR√ÅGIL: Requiere manejo especial");
        System.out.println("\nüöó TIPOS DE VEH√çCULOS:");
        System.out.println("‚Ä¢ üöê Furgoneta: Ideal para env√≠os locales y peque√±os");
        System.out.println("‚Ä¢ üöõ Cami√≥n: Para cargas medianas y largas distancias");
        System.out.println("‚Ä¢ üö¢ Barco: Para env√≠os a islas y provincias costeras");
        System.out.println("‚Ä¢ ‚úàÔ∏è Avi√≥n: Para env√≠os urgentes y largas distancias");
        System.out.println("\nüéÆ OBJETIVO DEL JUEGO:");
        System.out.println("‚Ä¢ üí∞ Mantener un balance positivo");
        System.out.println("‚Ä¢ üòä Mantener alta satisfacci√≥n de clientes");
        System.out.println("‚Ä¢ üì¶ Gestionar eficientemente los pedidos");
        System.out.println("‚Ä¢ üöó Expandir tu flota de veh√≠culos");
        System.out.println("‚Ä¢ üåç Conectar todas las provincias de Espa√±a");
        
        // Solicitar nombre del jugador
        System.out.print("\nüë§ Por favor, introduce tu nombre: ");
        String nombreJugador = scanner.nextLine();
        
        // Seleccionar provincia
        String provincia = seleccionarProvincia(scanner);
        
        // Seleccionar dificultad
        String dificultad = seleccionarDificultad(scanner);
        
        // Seleccionar modo de juego
        String modoJuego = seleccionarModoJuego(scanner);
        
        // Iniciar juego
        game.JuegoLogistica juego = new game.JuegoLogistica(provincia, dificultad, nombreJugador, modoJuego);
        juego.iniciar();
    }

    private static void cargarPartida() {
        System.out.println("\n‚ö†Ô∏è Funci√≥n no implementada: Cargar partida");
    }

    private static void mostrarCreditos() {
        System.out.println("\n==============================================");
        System.out.println("üìù CR√âDITOS");
        System.out.println("==============================================");
        System.out.println("Juego desarrollado en JAVA para la asignatura de");
        System.out.println("Dise√±o de Software por alumnos de U-Tad");
        System.out.println("\nDesarrolladores:");
        System.out.println("‚Ä¢ Manuel Martinez | GitHub: @ch0rtas");
        System.out.println("‚Ä¢ Luis Marquina | GitHub: @Luiiss44");
        System.out.println("‚Ä¢ Miguel Toran");
        System.out.println("\nRepositorio del proyecto:");
        System.out.println("https://github.com/Luiiss44/skyline-logistics");
        
        System.out.println("\nEscribe 0 para volver al men√∫ principal...");
        new Scanner(System.in).nextLine();
    }
} 