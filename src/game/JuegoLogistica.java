package game;

import java.util.Scanner;
import java.util.Random;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Set;
import java.util.Arrays;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Clase principal que gestiona el juego de log√≠stica
 */
public class JuegoLogistica {
    private Jugador jugador;
    private Scanner scanner;
    private Random random;
    private Map<String, Pedido> pedidos;
    private List<Pedido> pedidosPendientes;
    private List<Pedido> pedidosEnCurso;
    private List<Vehiculo> flota;
    private int diaActual;
    private Calendar fechaActual;
    private String almacenPrincipal;
    private String dificultad;
    private String modoJuego;
    private int satisfaccionClientes;
    private int enviosExitosos;
    private int enviosTotales;
    private int beneficiosAcumulados;
    private static final double TASA_IMPUESTOS = 0.45;
    private static final SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yy");
    private static final String[] PROVINCIAS = {
        "Madrid", "Barcelona", "Valencia", "Sevilla", "Zaragoza",
        "M√°laga", "Murcia", "Palma de Mallorca", "Las Palmas", "Bilbao",
        "Alicante", "C√≥rdoba", "Valladolid", "Vigo", "Gij√≥n"
    };

    // Provincias que son islas
    private static final String[] ISLAS = {
        "Palma de Mallorca", "Las Palmas"
    };

    // Provincias con acceso mar√≠timo (puertos)
    private static final String[] PROVINCIAS_MARITIMAS = {
        "Barcelona", "Valencia", "M√°laga", "Bilbao", "Alicante", "Vigo", "Gij√≥n",
        "Palma de Mallorca", "Las Palmas"
    };

    // Matriz de distancias entre provincias (en km)
    private static final int[][] DISTANCIAS = {
        // Madrid, Barcelona, Valencia, Sevilla, Zaragoza, M√°laga, Murcia, Palma, Las Palmas, Bilbao, Alicante, C√≥rdoba, Valladolid, Vigo, Gij√≥n
        {0, 621, 352, 538, 325, 530, 400, 800, 1800, 395, 420, 400, 193, 599, 450}, // Madrid
        {621, 0, 349, 1000, 296, 1000, 600, 200, 1800, 610, 500, 900, 800, 1000, 800}, // Barcelona
        {352, 349, 0, 650, 300, 600, 250, 300, 1800, 600, 166, 500, 500, 800, 700}, // Valencia
        {538, 1000, 650, 0, 800, 200, 400, 600, 1800, 800, 500, 140, 600, 900, 800}, // Sevilla
        {325, 296, 300, 800, 0, 700, 500, 500, 1800, 300, 400, 600, 300, 700, 600}, // Zaragoza
        {530, 1000, 600, 200, 700, 0, 300, 400, 1800, 800, 400, 200, 700, 1000, 900}, // M√°laga
        {400, 600, 250, 400, 500, 300, 0, 300, 1800, 700, 100, 300, 600, 900, 800}, // Murcia
        {800, 200, 300, 600, 500, 400, 300, 0, 1800, 800, 300, 600, 800, 1000, 900}, // Palma de Mallorca
        {1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 0, 1800, 1800, 1800, 1800, 1800, 1800}, // Las Palmas
        {395, 610, 600, 800, 300, 800, 700, 800, 1800, 0, 600, 700, 280, 400, 300}, // Bilbao
        {420, 500, 166, 500, 400, 400, 100, 300, 1800, 600, 0, 400, 500, 800, 700}, // Alicante
        {400, 900, 500, 140, 600, 200, 300, 600, 1800, 700, 400, 0, 500, 800, 700}, // C√≥rdoba
        {193, 800, 500, 600, 300, 700, 600, 800, 1800, 280, 500, 500, 0, 400, 300}, // Valladolid
        {599, 1000, 800, 900, 700, 1000, 900, 1000, 1800, 400, 800, 800, 400, 0, 200}, // Vigo
        {450, 800, 700, 800, 600, 900, 800, 900, 1800, 300, 700, 700, 300, 200, 0}  // Gij√≥n
    };

    private List<Vehiculo> vehiculosMercado;
    private static final String[] TIPOS_CARGA = {"NORMAL", "REFRIGERADO", "CONGELADO", "PELIGROSO", "ESCOLTADO", "FR√ÅGIL", "PERECEDERO", "ALTO_VALOR", "SERES_VIVOS"};

    private static final Map<String, Map<String, Integer>> OBJETIVOS_CAMPANA = new HashMap<>();
    
    static {
        // Objetivos m√≠nimos
        Map<String, Integer> objetivosMinimos = new HashMap<>();
        objetivosMinimos.put("dias", 30);
        objetivosMinimos.put("enviosExitosos", 50);
        objetivosMinimos.put("satisfaccion", 80);
        objetivosMinimos.put("beneficios", 100000);
        OBJETIVOS_CAMPANA.put("minimos", objetivosMinimos);
        
        // Objetivos avanzados
        Map<String, Integer> objetivosAvanzados = new HashMap<>();
        objetivosAvanzados.put("dias", 60);
        objetivosAvanzados.put("enviosExitosos", 100);
        objetivosAvanzados.put("satisfaccion", 90);
        objetivosAvanzados.put("beneficios", 250000);
        OBJETIVOS_CAMPANA.put("avanzados", objetivosAvanzados);
        
        // Objetivos √©lite
        Map<String, Integer> objetivosElite = new HashMap<>();
        objetivosElite.put("dias", 100);
        objetivosElite.put("enviosExitosos", 200);
        objetivosElite.put("satisfaccion", 95);
        objetivosElite.put("beneficios", 500000);
        OBJETIVOS_CAMPANA.put("elite", objetivosElite);
    }

    /**
     * Constructor del juego
     * @param almacenPrincipal Provincia seleccionada como almac√©n principal
     * @param dificultad Nivel de dificultad
     * @param nombreJugador Nombre del jugador
     * @param modoJuego Modo de juego seleccionado
     */
    public JuegoLogistica(String almacenPrincipal, String dificultad, String nombreJugador, String modoJuego) {
        // Normalizar el nombre del almac√©n principal
        this.almacenPrincipal = normalizarNombreProvincia(almacenPrincipal);
        this.dificultad = dificultad.toLowerCase();
        this.modoJuego = modoJuego.toLowerCase();
        this.jugador = new Jugador(nombreJugador, calcularBalanceInicial());
        this.scanner = new Scanner(System.in);
        this.random = new Random();
        this.pedidos = new HashMap<>();
        this.pedidosPendientes = new ArrayList<>();
        this.pedidosEnCurso = new ArrayList<>();
        this.diaActual = 1;
        this.fechaActual = Calendar.getInstance();
        this.satisfaccionClientes = 100;
        this.enviosExitosos = 0;
        this.enviosTotales = 0;
        this.beneficiosAcumulados = 0;
    }

    /**
     * Calcula el balance inicial seg√∫n la dificultad y modo de juego
     * @return int con el balance inicial
     */
    private int calcularBalanceInicial() {
        if (modoJuego.equals("libre")) {
            return 999999;
        }
        
        switch (dificultad) {
            case "easy":
                return 50000;
            case "medium":
                return 25000;
            case "hard":
                return 10000;
            default:
                return 25000;
        }
    }

    /**
     * Calcula la multa por rechazar un pedido
     * @param pedido Pedido a rechazar
     * @return int con el monto de la multa
     */
    private int calcularMultaRechazo(Pedido pedido) {
        int base = 5000;
        int multa = base;
        
        // Aumentar seg√∫n la dificultad
        switch (dificultad) {
            case "easy":
                multa *= 1;
                break;
            case "medium":
                multa *= 1.5;
                break;
            case "hard":
                multa *= 2;
                break;
        }
        
        // Aumentar seg√∫n el d√≠a actual
        multa *= (1 + (diaActual * 0.1)); // 10% m√°s por cada d√≠a
        
        // Aumentar seg√∫n la prioridad
        if (pedido.getPrioridad().equals("URGENTE")) {
            multa *= 2;
        } else if (pedido.getPrioridad().equals("NORMAL")) {
            multa *= 1.5;
        }
        
        return (int) multa;
    }

    /**
     * Calcula los d√≠as entre pagos de impuestos seg√∫n la dificultad
     * @return int con los d√≠as entre pagos
     */
    private int calcularDiasImpuestos() {
        switch (dificultad) {
            case "easy":
                return 8;
            case "medium":
                return 5;
            case "hard":
                return 3;
            default:
                return 5;
        }
    }

    /**
     * Inicia el juego
     */
    public void iniciar() {
        mostrarBienvenida();
        inicializarFlota();
        generarVehiculosMercado();
        generarPedidosDia();
        
        while (!jugadorDerrotado()) {
            mostrarMenuPrincipal();
            procesarOpcion(scanner.nextLine());
        }
        
        mostrarGameOver();
    }

    /**
     * Muestra la pantalla de bienvenida
     */
    private void mostrarBienvenida() {
        System.out.println("\n‚úÖ Sistema iniciado en regi√≥n: " + almacenPrincipal);
        System.out.println("üí∞ Balance inicial: $" + jugador.getPresupuesto());
    }

    /**
     * Inicializa la flota de veh√≠culos seg√∫n la dificultad
     */
    private void inicializarFlota() {
        flota = new ArrayList<>();
        Random random = new Random();
        
        // Funci√≥n auxiliar para generar tipos de carga aleatorios
        Function<Integer, String[]> generarTiposCarga = (numTipos) -> {
            List<String> tiposDisponibles = new ArrayList<>(Arrays.asList(TIPOS_CARGA));
            List<String> tiposSeleccionados = new ArrayList<>();
            tiposSeleccionados.add("NORMAL"); // Todos los veh√≠culos pueden transportar carga normal
            
            for (int i = 1; i < numTipos; i++) {
                if (tiposDisponibles.isEmpty()) break;
                int index = random.nextInt(tiposDisponibles.size());
                tiposSeleccionados.add(tiposDisponibles.remove(index));
            }
            
            return tiposSeleccionados.toArray(new String[0]);
        };
        
        switch (dificultad) {
            case "easy":
                // 3 furgonetas, 2 camiones, 2 barcos, 2 aviones
                flota.add(new Vehiculo("Furgoneta", "F" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Furgoneta", "F" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Furgoneta", "F" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Cami√≥n", "C" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Cami√≥n", "C" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Barco", "B" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Barco", "B" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Avi√≥n", "A" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Avi√≥n", "A" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                break;
            case "medium":
                // 2 furgonetas, 2 camiones, 1 barco, 1 avi√≥n
                flota.add(new Vehiculo("Furgoneta", "F" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Furgoneta", "F" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Cami√≥n", "C" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Cami√≥n", "C" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Barco", "B" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Avi√≥n", "A" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                break;
            case "hard":
                // 1 furgoneta, 1 cami√≥n, 1 barco, 1 avi√≥n
                flota.add(new Vehiculo("Furgoneta", "F" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Cami√≥n", "C" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Barco", "B" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                flota.add(new Vehiculo("Avi√≥n", "A" + String.format("%02d", random.nextInt(100)), generarTiposCarga.apply(3)));
                break;
        }

        System.out.println("\nüõ† Empresa creada:");
        System.out.println("   - Almac√©n: " + almacenPrincipal);
        System.out.print("   - Veh√≠culos: ");
        for (int i = 0; i < flota.size(); i++) {
            Vehiculo v = flota.get(i);
            System.out.print(v.getTipo() + " " + v.getId());
            if (i < flota.size() - 1) {
                System.out.print(", ");
            }
        }
        System.out.println();
    }

    /**
     * Muestra la flota de veh√≠culos
     */
    private void mostrarFlota() {
        System.out.println("\nüöó FLOTA DE VEH√çCULOS:");
        
        // Calcular anchos m√°ximos para cada columna
        String[] encabezados = {"TIPO", "ID", "CAPACIDAD", "VELOCIDAD", "COSTE/KM", "ESTADO", "SALUD", "CARGAS PERMITIDAS"};
        int[] anchos = new int[encabezados.length];
        
        // Inicializar anchos con los encabezados
        for (int i = 0; i < encabezados.length; i++) {
            anchos[i] = encabezados[i].length();
        }
        
        // Calcular anchos m√°ximos basados en el contenido
        for (Vehiculo vehiculo : flota) {
            String estado;
            if (vehiculo.getPedidoAsignado() != null) {
                Calendar fechaEntrega = Calendar.getInstance();
                fechaEntrega.setTime(fechaActual.getTime());
                fechaEntrega.add(Calendar.DAY_OF_MONTH, vehiculo.getPedidoAsignado().getDiasRestantes());
                estado = "Ocupado (" + vehiculo.getPedidoAsignado().getId() + ") hasta " + formatoFecha.format(fechaEntrega.getTime());
            } else {
                estado = "Disponible";
            }
            
            String[] valores = {
                vehiculo.getTipo(),
                vehiculo.getId(),
                String.valueOf(vehiculo.getCapacidad()),
                String.valueOf(vehiculo.getVelocidad()),
                "$" + vehiculo.getCostePorKm(),
                estado,
                vehiculo.getSalud() + "%",
                String.join(", ", vehiculo.getTiposPaquetesPermitidos())
            };
            
            for (int i = 0; i < valores.length; i++) {
                anchos[i] = Math.max(anchos[i], valores[i].length());
            }
        }

        // Mostrar tabla
        System.out.println(generarFilaTabla(encabezados, anchos));
        System.out.println(generarLineaSeparadora(anchos));
        
        // Mostrar datos
        for (Vehiculo vehiculo : flota) {
            String estado;
            if (vehiculo.getPedidoAsignado() != null) {
                Calendar fechaEntrega = Calendar.getInstance();
                fechaEntrega.setTime(fechaActual.getTime());
                fechaEntrega.add(Calendar.DAY_OF_MONTH, vehiculo.getPedidoAsignado().getDiasRestantes());
                estado = "Ocupado (" + vehiculo.getPedidoAsignado().getId() + ") hasta " + formatoFecha.format(fechaEntrega.getTime());
            } else {
                estado = "Disponible";
            }
            
            String[] valores = {
                vehiculo.getTipo(),
                vehiculo.getId(),
                String.valueOf(vehiculo.getCapacidad()),
                String.valueOf(vehiculo.getVelocidad()),
                "$" + vehiculo.getCostePorKm(),
                estado,
                vehiculo.getSalud() + "%",
                String.join(", ", vehiculo.getTiposPaquetesPermitidos())
            };
            System.out.println(generarFilaTabla(valores, anchos));
        }

        System.out.println("\n01. Volver al men√∫ principal");
        System.out.println("02. Reparar veh√≠culo");
        System.out.println("03. Ver mercado de veh√≠culos");
        System.out.print("\nSeleccione una opci√≥n: ");
        String opcion = scanner.nextLine();

        switch (opcion) {
            case "01":
            case "1":
                mostrarMenuPrincipal();
                break;
            case "02":
            case "2":
                repararVehiculo();
                break;
            case "03":
            case "3":
            mostrarMercadoVehiculos();
                break;
            default:
                System.out.println("\n‚ùå Opci√≥n no v√°lida");
                mostrarFlota();
        }
    }

    /**
     * Muestra el men√∫ de reparaci√≥n de veh√≠culos
     */
    private void repararVehiculo() {
        if (flota.isEmpty()) {
            System.out.println("\n‚ùå No tienes veh√≠culos para reparar");
            mostrarMenuPrincipal();
            return;
        }

        System.out.println("\n=== üîß REPARACI√ìN DE VEH√çCULOS üîß ===");
        System.out.println("Balance actual: " + jugador.getPresupuesto() + "‚Ç¨");
        
        for (int i = 0; i < flota.size(); i++) {
            Vehiculo v = flota.get(i);
            System.out.printf("\n%d. %s\n", i + 1, v.getNombre());
            System.out.println("   Salud: " + v.getSalud() + "%");
            System.out.println("   Coste de reparaci√≥n: " + v.getCosteReparacion() + "‚Ç¨");
        }
        
        System.out.println("\n0. Volver al men√∫ principal");
        System.out.print("\nSeleccione un veh√≠culo para reparar (0 para volver): ");
        String opcion = scanner.nextLine();
        
        if (opcion.equals("0")) {
            mostrarMenuPrincipal();
            return;
        }
        
        try {
            int indice = Integer.parseInt(opcion) - 1;
            if (indice >= 0 && indice < flota.size()) {
                Vehiculo vehiculoSeleccionado = flota.get(indice);
                if (modoJuego.equals("libre") || jugador.getPresupuesto() >= vehiculoSeleccionado.getCosteReparacion()) {
                    if (!modoJuego.equals("libre")) {
                        jugador.gastar(vehiculoSeleccionado.getCosteReparacion());
                    }
                    vehiculoSeleccionado.reparar();
                    System.out.println("\n‚úÖ Has reparado el " + vehiculoSeleccionado.getNombre());
                } else {
                    System.out.println("\n‚ùå No tienes suficiente dinero para reparar este veh√≠culo");
                }
            } else {
                System.out.println("\n‚ùå Opci√≥n no v√°lida");
            }
        } catch (NumberFormatException e) {
            System.out.println("\n‚ùå Por favor, introduce un n√∫mero v√°lido");
        }
        
        repararVehiculo();
    }

    /**
     * Muestra el mercado de veh√≠culos
     */
    private void mostrarMercadoVehiculos() {
        System.out.println("\n=== üöó MERCADO DE VEH√çCULOS üöó ===");
        System.out.println("Balance actual: " + jugador.getPresupuesto() + "‚Ç¨");
        
        for (int i = 0; i < vehiculosMercado.size(); i++) {
            Vehiculo v = vehiculosMercado.get(i);
            System.out.printf("\n%d. %s\n", i + 1, v.getNombre());
            System.out.println("   Capacidad: " + v.getCapacidad() + " kg");
            System.out.println("   Velocidad: " + v.getVelocidad() + " km/h");
            System.out.println("   Consumo: " + v.getConsumo() + " L/100km");
            System.out.println("   Precio: " + v.getPrecio() + "‚Ç¨");
        }
        
        System.out.println("\n0. Volver al men√∫ principal");
        System.out.print("\nSeleccione un veh√≠culo para comprar (0 para volver): ");
        String opcion = scanner.nextLine();
        
        if (opcion.equals("0")) {
            mostrarMenuPrincipal();
            return;
        }
        
        try {
            int indice = Integer.parseInt(opcion) - 1;
            if (indice >= 0 && indice < vehiculosMercado.size()) {
                Vehiculo vehiculoSeleccionado = vehiculosMercado.get(indice);
                if (modoJuego.equals("libre") || jugador.getPresupuesto() >= vehiculoSeleccionado.getPrecio()) {
                    flota.add(vehiculoSeleccionado);
                    if (!modoJuego.equals("libre")) {
                        jugador.gastar(vehiculoSeleccionado.getPrecio());
                    }
                    System.out.println("\n‚úÖ Has comprado un " + vehiculoSeleccionado.getNombre());
                    vehiculosMercado.remove(indice);
                } else {
                    System.out.println("\n‚ùå No tienes suficiente dinero para comprar este veh√≠culo");
                }
            } else {
                System.out.println("\n‚ùå Opci√≥n no v√°lida");
            }
        } catch (NumberFormatException e) {
            System.out.println("\n‚ùå Por favor, introduce un n√∫mero v√°lido");
        }
        
        mostrarMercadoVehiculos();
    }

    /**
     * Muestra el men√∫ principal
     */
    private void mostrarMenuPrincipal() {
        System.out.println("\n==================================================");
        System.out.println("üìÖ D√çA " + diaActual + " (" + formatoFecha.format(fechaActual.getTime()) + ") | ALMAC√âN PRINCIPAL: " + almacenPrincipal);
        System.out.println("==================================================");
        System.out.println("\n01. Ver pedidos pendientes");
        System.out.println("02. Ver pedidos en curso");
        System.out.println("03. Gestionar pedidos");
        System.out.println("04. Ver flota");
        System.out.println("05. Ver estad√≠sticas");
        System.out.println("06. Pasar al siguiente d√≠a");
        System.out.println("99. Finalizar partida");
        System.out.print("\nSeleccione una opci√≥n: ");
    }

    /**
     * Procesa la opci√≥n seleccionada
     * @param opcion Opci√≥n elegida por el usuario
     */
    private void procesarOpcion(String opcion) {
        switch (opcion) {
            case "01":
            case "1":
                mostrarPedidosPendientes();
                break;
            case "02":
            case "2":
                mostrarPedidosEnCurso();
                break;
            case "03":
            case "3":
                gestionarPedido();
                break;
            case "04":
            case "4":
                mostrarFlota();
                break;
            case "05":
            case "5":
                mostrarEstadisticas();
                break;
            case "06":
            case "6":
                pasarDia();
                break;
            case "99":
                mostrarEstadisticas();
                System.exit(0);
                break;
            default:
                System.out.println("\n‚ùå Opci√≥n no v√°lida");
                mostrarMenuPrincipal();
                procesarOpcion(scanner.nextLine());
        }
    }

    /**
     * Genera un pedido aleatorio
     * @return Pedido generado
     */
    private Pedido generarPedidoAleatorio() {
        String[] clientes = {
            "Hospital Regional", 
            "Farmacia Central", 
            "Laboratorio M√©dico",
            "Supermercado Local",
            "Restaurante VIP",
            "Tienda Electr√≥nica",
            "Florister√≠a Central",
            "Joyer√≠a Premium",
            "Galer√≠a de Arte",
            "Constructora",
            "F√°brica Industrial",
            "Aeropuerto Local",
            "Puerto Mar√≠timo",
            "Centro Cient√≠fico",
            "Universidad"
        };
        
        // Cargas espec√≠ficas por tipo de paquete
        Map<String, String[]> cargasPorTipo = new HashMap<>();
        cargasPorTipo.put("NORMAL", new String[]{"Materiales Construcci√≥n", "Piezas Industriales", "Equipaje VIP", "Material Educativo"});
        cargasPorTipo.put("REFRIGERADO", new String[]{"Vacunas", "Medicamentos", "Alimentos Frescos", "Mariscos Frescos"});
        cargasPorTipo.put("CONGELADO", new String[]{"Productos Congelados", "Muestras Biol√≥gicas", "Alimentos Ultra Congelados"});
        cargasPorTipo.put("PELIGROSO", new String[]{"Productos Qu√≠micos", "Materiales Explosivos", "Residuos T√≥xicos", "Combustibles"});
        cargasPorTipo.put("ESCOLTADO", new String[]{"Joyas Valiosas", "Obras de Arte", "Dinero", "Documentos Secretos"});
        cargasPorTipo.put("FR√ÅGIL", new String[]{"Equipos M√©dicos", "Electr√≥nicos", "Flores Ex√≥ticas", "Instrumentos Musicales", "Antig√ºedades"});
        cargasPorTipo.put("PERECEDERO", new String[]{"Frutas Frescas", "Verduras", "L√°cteos", "Carnes"});
        cargasPorTipo.put("ALTO_VALOR", new String[]{"Obras de Arte", "Metales Preciosos", "Electr√≥nica de Alta Gama", "Documentos Confidenciales"});
        cargasPorTipo.put("SERES_VIVOS", new String[]{"Animales Dom√©sticos", "Ganado", "Aves", "Peces"});
        
        String[] prioridades = {"URGENTE", "NORMAL", "BAJA"};
        String[] tiposPaquetes = {"NORMAL", "REFRIGERADO", "CONGELADO", "ESCOLTADO", "PELIGROSO", "FR√ÅGIL", "PERECEDERO", "ALTO_VALOR", "SERES_VIVOS"};

        // Seleccionar tipo de paquete
        String tipoPaquete = tiposPaquetes[random.nextInt(tiposPaquetes.length)];
        
        // Seleccionar carga seg√∫n el tipo
        String[] cargasDisponibles = cargasPorTipo.get(tipoPaquete);
        String carga = cargasDisponibles[random.nextInt(cargasDisponibles.length)];
        
        // Seleccionar cliente
        String cliente = clientes[random.nextInt(clientes.length)];
        
        // Seleccionar prioridad
        String prioridad = prioridades[random.nextInt(prioridades.length)];
        
        // Generar ID y peso seg√∫n el tipo de paquete
        String idPedido = "P" + (100 + random.nextInt(900));
        int peso;
        
        // Ajustar peso seg√∫n el tipo de paquete
        switch (tipoPaquete) {
            case "NORMAL":
                peso = 100 + random.nextInt(900); // 100-1000 kg
                break;
            case "REFRIGERADO":
                peso = 200 + random.nextInt(800); // 200-1000 kg
                break;
            case "CONGELADO":
                peso = 500 + random.nextInt(1500); // 500-2000 kg
                break;
            case "PELIGROSO":
                peso = 1000 + random.nextInt(4000); // 1000-5000 kg
                break;
            case "ESCOLTADO":
                peso = 50 + random.nextInt(450); // 50-500 kg
                break;
            case "FR√ÅGIL":
                peso = 10 + random.nextInt(490); // 10-500 kg
                break;
            case "PERECEDERO":
                peso = 50 + random.nextInt(450); // 50-500 kg
                break;
            case "ALTO_VALOR":
                peso = 10 + random.nextInt(90); // 10-100 kg
                break;
            case "SERES_VIVOS":
                peso = 100 + random.nextInt(900); // 100-1000 kg
                break;
            default:
                peso = 100 + random.nextInt(900);
        }

        // Seleccionar un destino aleatorio que no sea el almac√©n principal
        String destino;
        do {
            destino = PROVINCIAS[random.nextInt(PROVINCIAS.length)];
        } while (destino.equalsIgnoreCase(almacenPrincipal));

        // Calcular distancia base
        int distancia = obtenerDistancia(almacenPrincipal, destino);
        
        // Calcular coste base del env√≠o (usando el veh√≠culo m√°s econ√≥mico)
        int costeBaseEnvio = distancia * 2; // 2‚Ç¨/km como m√≠nimo (furgoneta)
        
        // Si es ruta mar√≠tima, usar barco como base
        if (esRutaMaritima(almacenPrincipal, destino)) {
            costeBaseEnvio = (int)(distancia * 3 * 1.5); // 3‚Ç¨/km * 1.5 por ser mar√≠timo
        }
        
        // Si es ruta a√©rea, usar avi√≥n como base
        if (esIsla(almacenPrincipal) || esIsla(destino)) {
            costeBaseEnvio = (int)(distancia * 10 * 2.0); // 10‚Ç¨/km * 2.0 por ser a√©reo
        }

        // Calcular pago base seg√∫n peso, tipo y distancia
        int pagoBase = peso * 2; // 2‚Ç¨ por kg base
        
        // Ajustar pago seg√∫n tipo de paquete
        switch (tipoPaquete) {
            case "REFRIGERADO":
                pagoBase *= 1.3; // 30% m√°s
                break;
            case "CONGELADO":
                pagoBase *= 1.5; // 50% m√°s
                break;
            case "ESCOLTADO":
                pagoBase *= 1.8; // 80% m√°s
                break;
            case "PELIGROSO":
                pagoBase *= 1.6; // 60% m√°s
                break;
            case "FR√ÅGIL":
                pagoBase *= 1.4; // 40% m√°s
                break;
            case "PERECEDERO":
                pagoBase *= 1.2; // 20% m√°s
                break;
            case "ALTO_VALOR":
                pagoBase *= 2.0; // 100% m√°s
                break;
            case "SERES_VIVOS":
                pagoBase *= 1.5; // 50% m√°s
                break;
        }
        
        // Ajustar pago seg√∫n distancia
        pagoBase = (int)(pagoBase * (1 + (distancia / 2000.0))); // Aumenta 1% por cada 20km
        
        // Ajustar pago seg√∫n prioridad
        if (prioridad.equals("URGENTE")) {
            pagoBase *= 1.5; // 50% m√°s
        } else if (prioridad.equals("BAJA")) {
            pagoBase *= 0.8; // 20% menos
        }
        
        // Asegurar que el pago sea al menos 1.5 veces el coste base del env√≠o
        pagoBase = Math.max(pagoBase, (int)(costeBaseEnvio * 1.5));
        
        // Asegurar un pago m√≠nimo para pedidos peque√±os
        pagoBase = Math.max(pagoBase, 2000); // M√≠nimo 2000‚Ç¨ para cualquier pedido

        // Calcular fecha de entrega seg√∫n la prioridad y el tipo de paquete
        Calendar fechaEntrega = (Calendar) fechaActual.clone();
        int diasBase;
        
        // D√≠as base seg√∫n tipo de paquete
        switch (tipoPaquete) {
            case "NORMAL":
                diasBase = 3;
                break;
            case "REFRIGERADO":
                diasBase = 2;
                break;
            case "CONGELADO":
                diasBase = 4;
                break;
            case "PELIGROSO":
                diasBase = 5;
                break;
            case "ESCOLTADO":
                diasBase = 2;
                break;
            case "FR√ÅGIL":
                diasBase = 2;
                break;
            case "PERECEDERO":
                diasBase = 1;
                break;
            case "ALTO_VALOR":
                diasBase = 3;
                break;
            case "SERES_VIVOS":
                diasBase = 2;
                break;
            default:
                diasBase = 3;
        }
        
        // Ajustar d√≠as seg√∫n prioridad
        if (prioridad.equals("URGENTE")) {
            diasBase = Math.max(1, diasBase - 2);
        } else if (prioridad.equals("BAJA")) {
            diasBase += 2;
        }
        
        fechaEntrega.add(Calendar.DAY_OF_MONTH, diasBase);

        // Determinar si es un pedido de varios d√≠as seg√∫n la dificultad
        int diasEntrega = 1;
        if (random.nextDouble() < calcularProbabilidadMultiDia()) {
            diasEntrega = 2 + random.nextInt(3);
            pagoBase *= diasEntrega;
        }

        return new Pedido(idPedido, cliente, carga, prioridad, pagoBase, diasEntrega, destino, fechaEntrega, peso, tipoPaquete);
    }

    /**
     * Calcula la probabilidad de que un pedido sea de varios d√≠as seg√∫n la dificultad
     * @return double con la probabilidad
     */
    private double calcularProbabilidadMultiDia() {
        switch (dificultad) {
            case "easy":
                return 0.2; // 20% de probabilidad
            case "medium":
                return 0.4; // 40% de probabilidad
            case "hard":
                return 0.6; // 60% de probabilidad
            default:
                return 0.3;
        }
    }

    /**
     * Genera los pedidos del d√≠a seg√∫n la dificultad
     */
    private void generarPedidosDia() {
        int cantidadPedidos = calcularCantidadPedidos();
        pedidosPendientes.clear();
        
        for (int i = 0; i < cantidadPedidos; i++) {
            Pedido pedido = generarPedidoAleatorio();
            pedidosPendientes.add(pedido);
            pedidos.put(pedido.getId(), pedido);
        }
        
        System.out.println("\nüì¶ Han entrado " + cantidadPedidos + " paquetes nuevos!");
    }

    /**
     * Calcula la cantidad de pedidos seg√∫n la dificultad
     * @return int con la cantidad de pedidos
     */
    private int calcularCantidadPedidos() {
        int base = 2; // Pedidos base por d√≠a
        switch (dificultad) {
            case "easy":
                return base + (diaActual / 3); // Aumenta 1 cada 3 d√≠as
            case "medium":
                return base + (diaActual / 2); // Aumenta 1 cada 2 d√≠as
            case "hard":
                return base + diaActual; // Aumenta 1 cada d√≠a
            default:
                return base;
        }
    }

    /**
     * Calcula el ancho m√°ximo necesario para una columna basado en su contenido
     * @param contenido Array de strings con el contenido de la columna
     * @param encabezado String con el encabezado de la columna
     * @return int con el ancho m√°ximo necesario
     */
    private int calcularAnchoColumna(String[] contenido, String encabezado) {
        int anchoMaximo = encabezado.length();
        for (String item : contenido) {
            anchoMaximo = Math.max(anchoMaximo, item.length());
        }
        return anchoMaximo;
    }

    /**
     * Genera una l√≠nea separadora para una tabla
     * @param anchos Array con los anchos de cada columna
     * @return String con la l√≠nea separadora
     */
    private String generarLineaSeparadora(int[] anchos) {
        StringBuilder linea = new StringBuilder();
        for (int ancho : anchos) {
            linea.append("-".repeat(ancho + 2)).append("+");
        }
        return linea.toString();
    }

    /**
     * Genera una fila de tabla con el formato correcto
     * @param valores Array con los valores de cada columna
     * @param anchos Array con los anchos de cada columna
     * @return String con la fila formateada
     */
    private String generarFilaTabla(String[] valores, int[] anchos) {
        StringBuilder fila = new StringBuilder();
        for (int i = 0; i < valores.length; i++) {
            fila.append(String.format(" %-" + anchos[i] + "s |", valores[i]));
        }
        return fila.toString();
    }

    /**
     * Muestra los pedidos pendientes
     */
    private void mostrarPedidosPendientes() {
        if (pedidosPendientes.isEmpty()) {
            System.out.println("\nüì≠ No hay pedidos pendientes");
            return;
        }

        // Calcular anchos m√°ximos para cada columna
        String[] encabezados = {"ID", "CLIENTE", "CARGA", "PRIORIDAD", "PESO", "DESTINO", "TIPO", "PAGO", "ENTREGA"};
        int[] anchos = new int[encabezados.length];
        
        // Inicializar anchos con los encabezados
        for (int i = 0; i < encabezados.length; i++) {
            anchos[i] = encabezados[i].length();
        }
        
        // Calcular anchos m√°ximos basados en el contenido
        for (Pedido pedido : pedidosPendientes) {
            String[] valores = {
                pedido.getId(),
                pedido.getCliente(),
                pedido.getCarga(),
                pedido.getPrioridad(),
                String.valueOf(pedido.getPeso()),
                pedido.getDestino(),
                pedido.getTipoPaquete(),
                "$" + pedido.getPago(),
                pedido.getFechaEntrega()
            };
            
            for (int i = 0; i < valores.length; i++) {
                anchos[i] = Math.max(anchos[i], valores[i].length());
            }
        }

        // Mostrar tabla
        System.out.println("\nüì¶ PEDIDOS PENDIENTES:");
        
        // Mostrar encabezados
        System.out.println(generarFilaTabla(encabezados, anchos));
        System.out.println(generarLineaSeparadora(anchos));
        
        // Mostrar datos
        for (Pedido pedido : pedidosPendientes) {
            String[] valores = {
                pedido.getId(),
                pedido.getCliente(),
                pedido.getCarga(),
                pedido.getPrioridad(),
                String.valueOf(pedido.getPeso()),
                pedido.getDestino(),
                pedido.getTipoPaquete(),
                "$" + pedido.getPago(),
                pedido.getFechaEntrega()
            };
            System.out.println(generarFilaTabla(valores, anchos));
        }
    }

    /**
     * Muestra los pedidos en curso
     */
    private void mostrarPedidosEnCurso() {
        if (pedidosEnCurso.isEmpty()) {
            System.out.println("\nüì¶ No hay pedidos en curso");
            return;
        }

        // Calcular anchos m√°ximos para cada columna
        String[] encabezados = {"ID", "CLIENTE", "CARGA", "PRIORIDAD", "PESO", "DESTINO", "TIPO", "PAGO", "ENTREGA M√ÅXIMA", "ENTREGA PREVISTA"};
        int[] anchos = new int[encabezados.length];
        
        // Inicializar anchos con los encabezados
        for (int i = 0; i < encabezados.length; i++) {
            anchos[i] = encabezados[i].length();
        }
        
        // Calcular anchos m√°ximos basados en el contenido
        for (Pedido pedido : pedidosEnCurso) {
            Calendar fechaPrevia = Calendar.getInstance();
            fechaPrevia.setTime(fechaActual.getTime());
            fechaPrevia.add(Calendar.DAY_OF_MONTH, pedido.getDiasRestantes());
            
            String[] valores = {
                pedido.getId(),
                pedido.getCliente(),
                pedido.getCarga(),
                pedido.getPrioridad(),
                String.valueOf(pedido.getPeso()),
                pedido.getDestino(),
                pedido.getTipoPaquete(),
                "$" + pedido.getPago(),
                pedido.getFechaEntrega(),
                formatoFecha.format(fechaPrevia.getTime())
            };
            
            for (int i = 0; i < valores.length; i++) {
                anchos[i] = Math.max(anchos[i], valores[i].length());
            }
        }

        // Mostrar tabla
        System.out.println("\nüì¶ PEDIDOS EN CURSO:");
        
        // Mostrar encabezados
        System.out.println(generarFilaTabla(encabezados, anchos));
        System.out.println(generarLineaSeparadora(anchos));
        
        // Mostrar datos
        for (Pedido pedido : pedidosEnCurso) {
            Calendar fechaPrevia = Calendar.getInstance();
            fechaPrevia.setTime(fechaActual.getTime());
            fechaPrevia.add(Calendar.DAY_OF_MONTH, pedido.getDiasRestantes());
            
            String[] valores = {
                pedido.getId(),
                pedido.getCliente(),
                pedido.getCarga(),
                pedido.getPrioridad(),
                String.valueOf(pedido.getPeso()),
                pedido.getDestino(),
                pedido.getTipoPaquete(),
                "$" + pedido.getPago(),
                pedido.getFechaEntrega(),
                formatoFecha.format(fechaPrevia.getTime())
            };
            System.out.println(generarFilaTabla(valores, anchos));
        }
    }

    /**
     * Obtiene la distancia entre dos provincias
     * @param origen Provincia de origen
     * @param destino Provincia de destino
     * @return int con la distancia en km
     */
    private int obtenerDistancia(String origen, String destino) {
        int indiceOrigen = -1;
        int indiceDestino = -1;
        
        for (int i = 0; i < PROVINCIAS.length; i++) {
            if (PROVINCIAS[i].equalsIgnoreCase(origen)) {
                indiceOrigen = i;
            }
            if (PROVINCIAS[i].equalsIgnoreCase(destino)) {
                indiceDestino = i;
            }
        }
        
        if (indiceOrigen == -1 || indiceDestino == -1) {
            return 0;
        }
        
        return DISTANCIAS[indiceOrigen][indiceDestino];
    }

    /**
     * Verifica si una ruta es mar√≠tima
     * @param origen Provincia de origen
     * @param destino Provincia de destino
     * @return true si es una ruta mar√≠tima, false si no
     */
    private boolean esRutaMaritima(String origen, String destino) {
        // Normalizar nombres de provincias
        String origenNormalizado = normalizarNombreProvincia(origen);
        String destinoNormalizado = normalizarNombreProvincia(destino);
        
        boolean origenEsIsla = esIsla(origenNormalizado);
        boolean destinoEsIsla = esIsla(destinoNormalizado);
        boolean origenEsCostero = esProvinciaCostera(origenNormalizado);
        boolean destinoEsCostero = esProvinciaCostera(destinoNormalizado);
        
        // Es ruta mar√≠tima si:
        // 1. El origen es una isla y el destino es costero o isla
        // 2. El origen es costero y el destino es una isla
        // 3. Ambos son costeros
        return (origenEsIsla && (destinoEsCostero || destinoEsIsla)) ||
               (origenEsCostero && destinoEsIsla) ||
               (origenEsCostero && destinoEsCostero);
    }

    /**
     * Verifica si una provincia es costera
     * @param provincia Nombre de la provincia
     * @return true si es costera, false si no
     */
    private boolean esProvinciaCostera(String provincia) {
        // Normalizar el nombre de la provincia
        String provinciaNormalizada = normalizarNombreProvincia(provincia);
        
        for (String puerto : PROVINCIAS_MARITIMAS) {
            if (puerto.equalsIgnoreCase(provinciaNormalizada)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Verifica si una provincia es una isla
     * @param provincia Nombre de la provincia
     * @return true si es una isla, false si no
     */
    private boolean esIsla(String provincia) {
        // Normalizar el nombre de la provincia
        String provinciaNormalizada = normalizarNombreProvincia(provincia);
        
        return provinciaNormalizada.equalsIgnoreCase("Palma de Mallorca") || 
               provinciaNormalizada.equalsIgnoreCase("Las Palmas");
    }

    /**
     * Normaliza el nombre de una provincia
     * @param provincia Nombre de la provincia a normalizar
     * @return String con el nombre normalizado
     */
    private String normalizarNombreProvincia(String provincia) {
        // Reemplazar guiones bajos por espacios
        String nombre = provincia.replace("_", " ");
        
        // Capitalizar cada palabra
        String[] palabras = nombre.split(" ");
        StringBuilder resultado = new StringBuilder();
        
        for (int i = 0; i < palabras.length; i++) {
            if (palabras[i].length() > 0) {
                resultado.append(Character.toUpperCase(palabras[i].charAt(0)));
                resultado.append(palabras[i].substring(1).toLowerCase());
                if (i < palabras.length - 1) {
                    resultado.append(" ");
                }
            }
        }
        
        return resultado.toString();
    }

    /**
     * Calcula el coste de env√≠o para un veh√≠culo
     * @param vehiculo Veh√≠culo que realizar√° el env√≠o
     * @param origen Provincia de origen
     * @param destino Provincia de destino
     * @return int con el coste total
     */
    private int calcularCosteEnvio(Vehiculo vehiculo, String origen, String destino) {
        int distancia = obtenerDistancia(origen, destino);
        int costeBase = vehiculo.getCostePorKm() * distancia;
        
        // Ajustes espec√≠ficos para barcos
        if (vehiculo.getTipo().equals("Barco")) {
            // Coste adicional por ser ruta mar√≠tima
            costeBase *= 1.5; // 50% m√°s caro que la ruta terrestre equivalente
            
            // Coste adicional por tipo de ruta mar√≠tima
            if (esIsla(origen) && esIsla(destino)) {
                costeBase *= 1.3; // 30% m√°s caro entre islas
            } else if (esIsla(origen) || esIsla(destino)) {
                costeBase *= 1.2; // 20% m√°s caro entre isla y costa
            }
        }
        
        // Ajustes espec√≠ficos para aviones
        if (vehiculo.getTipo().equals("Avi√≥n")) {
            // Coste adicional por ser ruta a√©rea
            costeBase *= 2.0; // 100% m√°s caro que la ruta terrestre equivalente
            
            // Coste adicional por tipo de ruta a√©rea
            if (esIsla(origen) && esIsla(destino)) {
                costeBase *= 1.5; // 50% m√°s caro entre islas
            } else if (esIsla(origen) || esIsla(destino)) {
                costeBase *= 1.3; // 30% m√°s caro entre isla y costa
            }
        }
        
        return costeBase;
    }

    /**
     * Verifica si existe una ruta terrestre v√°lida entre dos provincias
     * @param origen Provincia de origen
     * @param destino Provincia de destino
     * @return true si existe una ruta terrestre v√°lida, false si no
     */
    private boolean existeRutaTerrestre(String origen, String destino) {
        // Normalizar nombres de provincias
        String origenNormalizado = normalizarNombreProvincia(origen);
        String destinoNormalizado = normalizarNombreProvincia(destino);
        
        // Si alguna de las provincias es una isla, no hay ruta terrestre
        if (esIsla(origenNormalizado) || esIsla(destinoNormalizado)) {
            return false;
        }
        
        // Obtener √≠ndices de las provincias
        int indiceOrigen = -1;
        int indiceDestino = -1;
        
        for (int i = 0; i < PROVINCIAS.length; i++) {
            if (PROVINCIAS[i].equalsIgnoreCase(origenNormalizado)) {
                indiceOrigen = i;
            }
            if (PROVINCIAS[i].equalsIgnoreCase(destinoNormalizado)) {
                indiceDestino = i;
            }
        }
        
        if (indiceOrigen == -1 || indiceDestino == -1) {
            return false;
        }
        
        // Verificar si hay una distancia terrestre v√°lida
        int distancia = DISTANCIAS[indiceOrigen][indiceDestino];
        return distancia > 0;
    }

    /**
     * Verifica si un veh√≠culo puede realizar una ruta espec√≠fica
     * @param vehiculo Veh√≠culo a verificar
     * @param origen Provincia de origen
     * @param destino Provincia de destino
     * @return true si el veh√≠culo puede realizar la ruta, false si no
     */
    private boolean vehiculoPuedeRealizarRuta(Vehiculo vehiculo, String origen, String destino) {
        switch (vehiculo.getTipo()) {
            case "Furgoneta":
            case "Cami√≥n":
            case "Camion":
                return existeRutaTerrestre(origen, destino);
            case "Barco":
                return esRutaMaritima(origen, destino);
            case "Avi√≥n":
                return true; // Los aviones pueden ir a cualquier parte
            default:
                return false;
        }
    }

    /**
     * Muestra los veh√≠culos disponibles para un pedido
     * @param pedido Pedido a transportar
     */
    private void mostrarVehiculosDisponibles(Pedido pedido) {
        System.out.println("\nüöó VEH√çCULOS DISPONIBLES:");
        
        // Filtrar veh√≠culos disponibles
        List<Vehiculo> vehiculosDisponibles = flota.stream()
            .filter(v -> v.estaDisponible() && v.puedeTransportarTipo(pedido.getTipoPaquete()))
            .collect(Collectors.toList());
            
        if (vehiculosDisponibles.isEmpty()) {
            System.out.println("\n‚ùå No hay veh√≠culos disponibles para este tipo de carga");
            pedidosPendientes.remove(pedido);
            return;
        }
        
        // Calcular anchos m√°ximos para cada columna
        String[] encabezados = {"TIPO", "ID", "CAPACIDAD", "VELOCIDAD", "COSTE/KM", "SALUD", "DESGASTE", "CARGAS PERMITIDAS"};
        int[] anchos = new int[encabezados.length];
        
        // Inicializar anchos con los encabezados
        for (int i = 0; i < encabezados.length; i++) {
            anchos[i] = encabezados[i].length();
        }
        
        // Calcular anchos m√°ximos basados en el contenido
        for (Vehiculo vehiculo : vehiculosDisponibles) {
            String[] valores = {
                vehiculo.getTipo(),
                vehiculo.getId(),
                String.valueOf(vehiculo.getCapacidad()),
                String.valueOf(vehiculo.getVelocidad()),
                "$" + vehiculo.getCostePorKm(),
                vehiculo.getSalud() + "%",
                vehiculo.getDesgastePorViaje() + "%",
                String.join(", ", vehiculo.getTiposPaquetesPermitidos())
            };
            
            for (int i = 0; i < valores.length; i++) {
                anchos[i] = Math.max(anchos[i], valores[i].length());
            }
        }

        // Mostrar tabla
        System.out.println(generarFilaTabla(encabezados, anchos));
        System.out.println(generarLineaSeparadora(anchos));
        
        // Mostrar datos
        for (Vehiculo vehiculo : vehiculosDisponibles) {
            String[] valores = {
                vehiculo.getTipo(),
                vehiculo.getId(),
                String.valueOf(vehiculo.getCapacidad()),
                String.valueOf(vehiculo.getVelocidad()),
                "$" + vehiculo.getCostePorKm(),
                vehiculo.getSalud() + "%",
                vehiculo.getDesgastePorViaje() + "%",
                String.join(", ", vehiculo.getTiposPaquetesPermitidos())
            };
            System.out.println(generarFilaTabla(valores, anchos));
        }
    }

    /**
     * Permite gestionar un pedido
     */
    private void gestionarPedido() {
        if (pedidosPendientes.isEmpty()) {
            System.out.println("\nüì≠ No hay pedidos pendientes para gestionar");
            return;
        }

        mostrarPedidosPendientes();
        System.out.print("\nIngrese ID del pedido a gestionar: ");
        String idPedido = scanner.nextLine();

        Pedido pedido = pedidos.get(idPedido);
        if (pedido == null) {
            System.out.println("‚ùå Pedido no encontrado");
            return;
        }

        // Verificar si hay veh√≠culos disponibles para esta ruta
        boolean hayVehiculosDisponibles = false;
        for (Vehiculo v : flota) {
            if (v.estaDisponible() && 
                v.puedeTransportarTipo(pedido.getTipoPaquete()) &&
                vehiculoPuedeRealizarRuta(v, almacenPrincipal, pedido.getDestino())) {
                hayVehiculosDisponibles = true;
                break;
            }
        }

        if (!hayVehiculosDisponibles) {
            System.out.println("\n‚ùå No hay veh√≠culos disponibles para realizar esta ruta");
            System.out.println("   - Origen: " + almacenPrincipal);
            System.out.println("   - Destino: " + pedido.getDestino());
            System.out.println("   - Tipo de carga: " + pedido.getTipoPaquete());
            return;
        }

        System.out.println("\n¬øQu√© desea hacer con el pedido #" + idPedido + "?");
        System.out.println("01. Enviar");
        System.out.println("02. Rechazar (Multa: $" + calcularMultaRechazo(pedido) + ")");
        System.out.print("\nOpci√≥n: ");
        String opcion = scanner.nextLine();

        if (opcion.equals("02") || opcion.equals("2")) {
            System.out.println("\n‚ö†Ô∏è ¬øEst√° seguro de rechazar el pedido #" + idPedido + "?");
            System.out.println("   - Multa por rechazo: $" + calcularMultaRechazo(pedido));
            System.out.print("   - Confirmar (S/N): ");
            
            String confirmacion = scanner.nextLine().toUpperCase();
            if (confirmacion.equals("S")) {
                pedidosPendientes.remove(pedido);
                System.out.println("‚ùå Pedido #" + idPedido + " rechazado");
                System.out.println("üí∞ Multa aplicada: $" + calcularMultaRechazo(pedido));
            }
            return;
        } else if (!opcion.equals("01") && !opcion.equals("1")) {
            System.out.println("\n‚ùå Opci√≥n no v√°lida");
            gestionarPedido();
            return;
        }

        // Mostrar veh√≠culos disponibles
        mostrarVehiculosDisponibles(pedido);
        if (pedidosPendientes.isEmpty()) {
            return;
        }

        System.out.print("\nIngrese ID del veh√≠culo a utilizar: ");
        String idVehiculo = scanner.nextLine().toUpperCase();
        
        Vehiculo vehiculoSeleccionado = null;
        for (Vehiculo v : flota) {
            if (v.getId().equals(idVehiculo)) {
                vehiculoSeleccionado = v;
                break;
            }
        }

        if (vehiculoSeleccionado == null) {
            System.out.println("‚ùå ID de veh√≠culo no v√°lido");
            return;
        }

        // Calcular costo total
        int costoTotal = calcularCosteEnvio(vehiculoSeleccionado, almacenPrincipal, pedido.getDestino());
        
        // Verificar balance
        if (jugador.getPresupuesto() < costoTotal) {
            System.out.println("‚ùå Balance insuficiente para realizar el env√≠o");
            return;
        }

        // Asignar veh√≠culo al pedido
        vehiculoSeleccionado.asignarPedido(pedido);
        pedido.setTransporteAsignado(vehiculoSeleccionado.getTipo() + " " + vehiculoSeleccionado.getId());

        // Resolver incidente si ocurre
        if (random.nextBoolean()) {
            resolverIncidente(pedido);
        }

        pedidosPendientes.remove(pedido);
        pedidosEnCurso.add(pedido);
        System.out.println("\n‚úÖ Pedido #" + idPedido + " gestionado exitosamente");
        System.out.println("   - Veh√≠culo asignado: " + vehiculoSeleccionado.getTipo() + " " + vehiculoSeleccionado.getId());
        System.out.println("   - Costo total: $" + costoTotal);
    }

    /**
     * Resuelve un incidente para un pedido
     * @param pedido Pedido afectado
     */
    private void resolverIncidente(Pedido pedido) {
        String tipoTransporte = pedido.getTransporteAsignado().split(" ")[0];
        String idVehiculo = pedido.getTransporteAsignado().split(" ")[1];
        
        // Encontrar el veh√≠culo afectado
        Vehiculo vehiculoAfectado = flota.stream()
            .filter(v -> v.getId().equals(idVehiculo))
            .findFirst()
            .orElse(null);
            
        if (vehiculoAfectado == null) {
            return;
        }
        
        // Aplicar desgaste normal por el viaje
        vehiculoAfectado.aplicarDesgaste();
        
        // Posibilidad de incidente adicional
        if (random.nextDouble() < 0.3) { // 30% de probabilidad de incidente
        String[] incidentesTerrestres = {
            "Ca√≠da de √°rbol en la carretera",
            "Accidente de tr√°fico",
            "Obras en la v√≠a",
            "Protesta de agricultores",
            "Control policial",
            "Aver√≠a mec√°nica",
            "Desprendimiento de rocas",
            "Nieve en la carretera",
                "Niebla densa",
                "Pinchazo de neum√°tico",
                "Fallo en el sistema de frenos",
                "Problemas con el motor",
                "Bater√≠a descargada",
                "Problemas con el sistema de refrigeraci√≥n",
                "Fallo en el sistema el√©ctrico"
        };

        String[] incidentesAereos = {
            "Turbulencias severas",
            "Retraso en el despegue",
            "Problemas t√©cnicos en el avi√≥n",
            "Mal tiempo en el aeropuerto",
            "Huelga de controladores",
            "Restricciones de espacio a√©reo",
            "Problemas de navegaci√≥n",
                "Viento fuerte en pista",
                "Fallo en el sistema de presurizaci√≥n",
                "Problemas con el tren de aterrizaje",
                "Aver√≠a en el sistema de combustible",
                "Problemas con el sistema de comunicaci√≥n",
                "Fallo en el sistema de ox√≠geno",
                "Problemas con el sistema de navegaci√≥n",
                "Aver√≠a en el sistema de climatizaci√≥n"
        };

        String[] incidentesMaritimos = {
            "Tormenta en el mar",
            "Niebla en la costa",
            "Problemas en el puerto",
            "Aver√≠a en el motor",
            "Oleaje fuerte",
            "Retraso en la descarga",
            "Problemas de navegaci√≥n",
                "Control de aduanas",
                "Fallo en el sistema de propulsi√≥n",
                "Problemas con el sistema de carga",
                "Aver√≠a en el sistema de refrigeraci√≥n",
                "Problemas con el sistema de navegaci√≥n",
                "Fallo en el sistema de comunicaci√≥n",
                "Problemas con el sistema de estabilizaci√≥n",
                "Aver√≠a en el sistema de lastre"
        };

        String incidente;
        int idIncidente = 100 + random.nextInt(900);
            int costeReparacion = 0;
            int diasRetraso = 0;

        // Seleccionar incidente seg√∫n el tipo de transporte
        switch (tipoTransporte) {
            case "Furgoneta":
            case "Cami√≥n":
                incidente = incidentesTerrestres[random.nextInt(incidentesTerrestres.length)];
                    // Asignar costes y retrasos seg√∫n el tipo de incidente
                    if (incidente.contains("Pinchazo")) {
                        costeReparacion = 500;
                        diasRetraso = 1;
                    } else if (incidente.contains("Aver√≠a") || incidente.contains("Fallo")) {
                        costeReparacion = 2000;
                        diasRetraso = 2;
                    } else if (incidente.contains("Accidente")) {
                        costeReparacion = 5000;
                        diasRetraso = 3;
                    } else {
                        costeReparacion = 1000;
                        diasRetraso = 1;
                    }
                break;
            case "Avi√≥n":
                incidente = incidentesAereos[random.nextInt(incidentesAereos.length)];
                    if (incidente.contains("Fallo") || incidente.contains("Aver√≠a")) {
                        costeReparacion = 10000;
                        diasRetraso = 2;
                    } else if (incidente.contains("Turbulencias")) {
                        costeReparacion = 0;
                        diasRetraso = 1;
                    } else {
                        costeReparacion = 5000;
                        diasRetraso = 1;
                    }
                break;
            case "Barco":
                incidente = incidentesMaritimos[random.nextInt(incidentesMaritimos.length)];
                    if (incidente.contains("Fallo") || incidente.contains("Aver√≠a")) {
                        costeReparacion = 8000;
                        diasRetraso = 2;
                    } else if (incidente.contains("Tormenta")) {
                        costeReparacion = 0;
                        diasRetraso = 2;
                    } else {
                        costeReparacion = 3000;
                        diasRetraso = 1;
                    }
                break;
            default:
                incidente = "Incidente desconocido";
                    costeReparacion = 1000;
                    diasRetraso = 1;
        }

        // Obtener la fecha l√≠mite de entrega del pedido
        Calendar fechaLimite = Calendar.getInstance();
        fechaLimite.setTime(fechaActual.getTime());
        fechaLimite.add(Calendar.DAY_OF_MONTH, pedido.getDiasRestantes());
        
        // Calcular fechas de llegada para cada opci√≥n
        Calendar fechaEspera = (Calendar) fechaActual.clone();
            fechaEspera.add(Calendar.DAY_OF_MONTH, diasRetraso + 2); // D√≠as de retraso + 2 d√≠as de espera
        
        Calendar fechaDesvio = (Calendar) fechaActual.clone();
            fechaDesvio.add(Calendar.DAY_OF_MONTH, diasRetraso + 1); // D√≠as de retraso + 1 d√≠a por desviar
            
            Calendar fechaReparacion = (Calendar) fechaActual.clone();
            fechaReparacion.add(Calendar.DAY_OF_MONTH, diasRetraso); // Solo los d√≠as de retraso por reparaci√≥n

        // Calcular los d√≠as de retraso para cada opci√≥n
        int diasRetrasoEspera = calcularDiasRetraso(fechaEspera, fechaLimite);
        int diasRetrasoDesvio = calcularDiasRetraso(fechaDesvio, fechaLimite);
            int diasRetrasoReparacion = calcularDiasRetraso(fechaReparacion, fechaLimite);

        System.out.println("\n‚ùó ALERTA: Incidente #" + idIncidente + " - " + incidente);
        System.out.println("   - Riesgo: Retraso en entrega");
        System.out.println("   - Fecha l√≠mite de entrega: " + formatoFecha.format(fechaLimite.getTime()));
        System.out.println("   - Soluciones posibles:");
            
            // Opci√≥n 1: Esperar
        System.out.println("     01. Esperar");
        System.out.println("         ‚Ä¢ Nueva fecha de entrega: " + formatoFecha.format(fechaEspera.getTime()));
        if (diasRetrasoEspera > 0) {
            if (diasRetrasoEspera == 1) {
                System.out.println("         ‚Ä¢ Penalizaci√≥n: 50% del pago");
            } else if (diasRetrasoEspera == 2) {
                System.out.println("         ‚Ä¢ Penalizaci√≥n: 10% del pago");
            } else {
                System.out.println("         ‚Ä¢ Penalizaci√≥n: 65% de multa");
            }
        } else {
            System.out.println("         ‚Ä¢ Sin penalizaci√≥n");
        }
        
            // Opci√≥n 2: Desviar ruta
        System.out.println("     02. Desviar ruta (Coste adicional: $1,000)");
        System.out.println("         ‚Ä¢ Nueva fecha de entrega: " + formatoFecha.format(fechaDesvio.getTime()));
        if (diasRetrasoDesvio > 0) {
            if (diasRetrasoDesvio == 1) {
                System.out.println("         ‚Ä¢ Penalizaci√≥n: 50% del pago");
            } else if (diasRetrasoDesvio == 2) {
                System.out.println("         ‚Ä¢ Penalizaci√≥n: 10% del pago");
            } else {
                System.out.println("         ‚Ä¢ Penalizaci√≥n: 65% de multa");
            }
        } else {
            System.out.println("         ‚Ä¢ Sin penalizaci√≥n");
        }
        
            // Opci√≥n 3: Reparar (solo si hay coste de reparaci√≥n)
            if (costeReparacion > 0) {
                System.out.println("     03. Reparar (Coste: $" + costeReparacion + ")");
                System.out.println("         ‚Ä¢ Nueva fecha de entrega: " + formatoFecha.format(fechaReparacion.getTime()));
                if (diasRetrasoReparacion > 0) {
                    if (diasRetrasoReparacion == 1) {
                        System.out.println("         ‚Ä¢ Penalizaci√≥n: 50% del pago");
                    } else if (diasRetrasoReparacion == 2) {
                        System.out.println("         ‚Ä¢ Penalizaci√≥n: 10% del pago");
                    } else {
                        System.out.println("         ‚Ä¢ Penalizaci√≥n: 65% de multa");
                    }
                } else {
                    System.out.println("         ‚Ä¢ Sin penalizaci√≥n");
                }
            }
            
            System.out.print("\nSeleccione soluci√≥n (01-03): ");
        String solucion = scanner.nextLine();

        System.out.println("\nüõ† Aplicando patr√≥n *Template Method*:");
        System.out.println("   1. Identificando causa: " + incidente);
        System.out.println("   2. Asignando recursos...");
        
            switch (solucion) {
                case "02":
                case "2":
            System.out.println("   3. Desviando ruta...");
            System.out.println("‚úÖ Resuelto: Env√≠o llegar√° el " + formatoFecha.format(fechaDesvio.getTime()));
            if (diasRetrasoDesvio > 0) {
                if (diasRetrasoDesvio == 1) {
                            pedido.setPago((int)(pedido.getPago() * 0.5));
                } else if (diasRetrasoDesvio == 2) {
                            pedido.setPago((int)(pedido.getPago() * 0.9));
                } else {
                            pedido.setPago((int)(pedido.getPago() * 0.35));
                        }
                    }
                    jugador.gastar(1000); // Coste adicional por desviar
                    vehiculoAfectado.aplicarDesgaste(); // Desgaste adicional por desviar
                    break;
                    
                case "03":
                case "3":
                    if (costeReparacion > 0) {
                        if (jugador.getPresupuesto() >= costeReparacion) {
                            System.out.println("   3. Realizando reparaci√≥n...");
                            System.out.println("‚úÖ Resuelto: Env√≠o llegar√° el " + formatoFecha.format(fechaReparacion.getTime()));
                            if (diasRetrasoReparacion > 0) {
                                if (diasRetrasoReparacion == 1) {
                                    pedido.setPago((int)(pedido.getPago() * 0.5));
                                } else if (diasRetrasoReparacion == 2) {
                                    pedido.setPago((int)(pedido.getPago() * 0.9));
                                } else {
                                    pedido.setPago((int)(pedido.getPago() * 0.35));
                                }
                            }
                            jugador.gastar(costeReparacion);
                            vehiculoAfectado.reparar(); // Reparar el veh√≠culo
                        } else {
                            System.out.println("‚ùå No hay suficiente presupuesto para la reparaci√≥n");
                            System.out.println("   3. Esperando resoluci√≥n...");
            System.out.println("‚úÖ Resuelto: Env√≠o llegar√° el " + formatoFecha.format(fechaEspera.getTime()));
            if (diasRetrasoEspera > 0) {
                if (diasRetrasoEspera == 1) {
                                    pedido.setPago((int)(pedido.getPago() * 0.5));
                } else if (diasRetrasoEspera == 2) {
                                    pedido.setPago((int)(pedido.getPago() * 0.9));
                } else {
                                    pedido.setPago((int)(pedido.getPago() * 0.35));
                }
            }
                            vehiculoAfectado.aplicarDesgaste(); // Desgaste adicional por esperar
                        }
        } else {
                        System.out.println("‚ùå No se puede reparar este tipo de incidente");
                        System.out.println("   3. Esperando resoluci√≥n...");
            System.out.println("‚úÖ Resuelto: Env√≠o llegar√° el " + formatoFecha.format(fechaEspera.getTime()));
            if (diasRetrasoEspera > 0) {
                if (diasRetrasoEspera == 1) {
                                pedido.setPago((int)(pedido.getPago() * 0.5));
                } else if (diasRetrasoEspera == 2) {
                                pedido.setPago((int)(pedido.getPago() * 0.9));
                } else {
                                pedido.setPago((int)(pedido.getPago() * 0.35));
                            }
                        }
                        vehiculoAfectado.aplicarDesgaste(); // Desgaste adicional por esperar
                    }
                    break;
                    
                default:
                    System.out.println("   3. Esperando resoluci√≥n...");
                    System.out.println("‚úÖ Resuelto: Env√≠o llegar√° el " + formatoFecha.format(fechaEspera.getTime()));
                    if (diasRetrasoEspera > 0) {
                        if (diasRetrasoEspera == 1) {
                            pedido.setPago((int)(pedido.getPago() * 0.5));
                        } else if (diasRetrasoEspera == 2) {
                            pedido.setPago((int)(pedido.getPago() * 0.9));
                        } else {
                            pedido.setPago((int)(pedido.getPago() * 0.35));
                        }
                    }
                    vehiculoAfectado.aplicarDesgaste(); // Desgaste adicional por esperar
            }
            
            pedido.setDiasRestantes(pedido.getDiasRestantes() + diasRetraso);
            satisfaccionClientes -= 5;
        }
    }
    
    private int calcularDiasRetraso(Calendar fechaLlegada, Calendar fechaLimite) {
        long diffMillis = fechaLlegada.getTimeInMillis() - fechaLimite.getTimeInMillis();
        int dias = (int) (diffMillis / (1000 * 60 * 60 * 24));
        return Math.max(0, dias); // Retornar 0 si la fecha es anterior o igual
    }

    /**
     * Muestra las estad√≠sticas actuales del juego
     */
    private void mostrarEstadisticas() {
        System.out.println("\n=== üìä ESTAD√çSTICAS FINALES üìä ===");
        System.out.println("D√≠as jugados: " + diaActual);
        System.out.println("Env√≠os exitosos: " + enviosExitosos);
        System.out.println("Env√≠os totales: " + enviosTotales);
        System.out.println("Satisfacci√≥n de clientes: " + satisfaccionClientes + "%");
        System.out.println("Beneficios acumulados: " + beneficiosAcumulados + "‚Ç¨");
        System.out.println("Balance final: " + jugador.getPresupuesto() + "‚Ç¨");
        
        if (modoJuego.equals("libre")) {
            System.out.println("\nüéÆ Modo Libre completado");
        } else if (modoJuego.equals("campa√±a")) {
            if (verificarObjetivosCampa√±a()) {
                System.out.println("\nüéâ ¬°Felicidades! Has completado la campa√±a");
            } else {
                System.out.println("\n‚ùå No has alcanzado los objetivos de la campa√±a");
            }
        } else {
            if (jugador.getPresupuesto() <= 0) {
                System.out.println("\n‚ùå GAME OVER - Te has quedado sin dinero");
            } else {
                System.out.println("\nüéâ ¬°Felicidades! Has completado el modo Desaf√≠o");
            }
        }
    }

    /**
     * Procesa los accidentes aleatorios
     */
    private void procesarAccidentes() {
        for (Pedido pedido : new ArrayList<>(pedidosEnCurso)) {
            if (random.nextDouble() < 0.15) { // 15% de probabilidad de accidente
                String tipoTransporte = pedido.getTransporteAsignado().split(" ")[0];
                String incidente;
                int costeAdicional = 0;

                switch (tipoTransporte) {
                    case "Furgoneta":
                    case "Cami√≥n":
                        incidente = "Accidente en carretera";
                        costeAdicional = 2000;
                        break;
                    case "Avi√≥n":
                        incidente = "Turbulencias severas";
                        costeAdicional = 5000;
                        break;
                    case "Barco":
                        incidente = "Tormenta en el mar";
                        costeAdicional = 3000;
                        break;
                    default:
                        incidente = "Incidente desconocido";
                        costeAdicional = 1000;
                }

                System.out.println("\n‚ö†Ô∏è ¬°INCIDENTE! El paquete #" + pedido.getId() + " ha sufrido " + incidente);
                System.out.println("   - Cliente: " + pedido.getCliente());
                System.out.println("   - Carga: " + pedido.getCarga());
                System.out.println("   - Coste adicional: $" + costeAdicional);
                
                pedido.setDiasRestantes(pedido.getDiasRestantes() + 1);
                satisfaccionClientes -= 5;
            }
        }
    }

    /**
     * Procesa el pago de impuestos
     */
    private void procesarImpuestos() {
        if (diaActual % calcularDiasImpuestos() == 0) {
            int impuestos = (int)(beneficiosAcumulados * TASA_IMPUESTOS);
            System.out.println("\nüí∞ " + jugador.getNombre() + ", es hora de pagar impuestos");
            System.out.println("   - Debes pagar el " + (TASA_IMPUESTOS * 100) + "% de tus beneficios");
            System.out.println("   - Beneficios acumulados: $" + beneficiosAcumulados);
            System.out.println("   - Impuestos a pagar: $" + impuestos);
            
            beneficiosAcumulados = 0;
        }
    }

    /**
     * Genera veh√≠culos aleatorios para el mercado
     */
    private void generarVehiculosMercado() {
        vehiculosMercado = new ArrayList<>();
        Random random = new Random();
        Set<String> idsUsados = new HashSet<>();
        
        // Generar 3 veh√≠culos diferentes
        while (vehiculosMercado.size() < 3) {
            String tipo = random.nextBoolean() ? "Furgoneta" : "Cami√≥n";
            // Generar ID con formato 1Letra2Numeros
            String id = tipo.charAt(0) + String.format("%02d", random.nextInt(100));
            
            // Verificar que el ID no est√© repetido
            if (idsUsados.contains(id)) {
                continue;
            }
            idsUsados.add(id);
            
            // Generar tipos de carga permitidos aleatorios (m√≠nimo 1, m√°ximo 3)
            int numTipos = 1 + random.nextInt(3);
            List<String> tiposPermitidos = new ArrayList<>();
            
            for (int j = 0; j < numTipos; j++) {
                String tipoCarga;
                do {
                    tipoCarga = TIPOS_CARGA[random.nextInt(TIPOS_CARGA.length)];
                } while (tiposPermitidos.contains(tipoCarga));
                tiposPermitidos.add(tipoCarga);
            }
            
            vehiculosMercado.add(new Vehiculo(tipo, id, tiposPermitidos.toArray(new String[0])));
        }
    }

    /**
     * Avanza al siguiente d√≠a
     */
    private void pasarDia() {
        if (!pedidosPendientes.isEmpty()) {
            System.out.println("\n‚ùå " + jugador.getNombre() + ", no puedes pasar al siguiente d√≠a con pedidos pendientes");
            return;
        }

        diaActual++;
        fechaActual.add(Calendar.DAY_OF_MONTH, 1); // A√±adir un d√≠a a la fecha actual
        
        System.out.println("\n==================================================");
        System.out.println("üìÖ D√çA " + diaActual + " (" + formatoFecha.format(fechaActual.getTime()) + ") | ENTREGA FINAL");
        System.out.println("==================================================");
        
        // Procesar accidentes
        procesarAccidentes();
        
        // Procesar env√≠os
        procesarPedidosEnCurso();
        
        // Procesar impuestos
        procesarImpuestos();
        
        // Generar nuevos veh√≠culos en el mercado
        generarVehiculosMercado();
        
        pedidos.clear();
        generarPedidosDia();
        mostrarEstadisticas();
    }

    /**
     * Muestra la pantalla de fin de juego
     */
    private void mostrarGameOver() {
        System.out.println("\n==============================================");
        System.out.println("üéÆ GAME OVER");
        System.out.println("==============================================");
        System.out.println("üí∞ Balance final: $" + jugador.getPresupuesto());
        System.out.println("üòä Satisfacci√≥n final: " + satisfaccionClientes + "%");
        System.out.println("üöö Env√≠os totales: " + enviosTotales);
        System.out.println("‚úÖ Env√≠os exitosos: " + enviosExitosos);
    }

    private void procesarPedidosEnCurso() {
        List<Pedido> pedidosCompletados = new ArrayList<>();
        
        for (Pedido pedido : pedidosEnCurso) {
            pedido.setDiasRestantes(pedido.getDiasRestantes() - 1);
            
            if (pedido.getDiasRestantes() <= 0) {
                int diasRetraso = Math.abs(pedido.getDiasRestantes());
                int pagoOriginal = pedido.getPago();
                int multa = 0;
                boolean exito = true;
                String mensaje = "";

                if (diasRetraso == 0) {
                    // Entrega a tiempo
                    mensaje = "‚úÖ " + jugador.getNombre() + ", el env√≠o #" + pedido.getId() + " se complet√≥ exitosamente";
                    multa = 0;
                } else if (diasRetraso == 1) {
                    // 1 d√≠a de retraso: 35% de multa
                    multa = (int)(pagoOriginal * 0.35);
                    mensaje = "‚ö†Ô∏è " + jugador.getNombre() + ", el env√≠o #" + pedido.getId() + " se complet√≥ con 1 d√≠a de retraso";
                } else if (diasRetraso == 2) {
                    // 2 d√≠as de retraso: 90% de multa
                    multa = (int)(pagoOriginal * 0.90);
                    mensaje = "‚ö†Ô∏è " + jugador.getNombre() + ", el env√≠o #" + pedido.getId() + " se complet√≥ con 2 d√≠as de retraso";
                } else {
                    // M√°s de 2 d√≠as: fallo y 150% de multa
                    multa = (int)(pagoOriginal * 1.50);
                    exito = false;
                    mensaje = "‚ùå " + jugador.getNombre() + ", el env√≠o #" + pedido.getId() + " fall√≥ por exceso de retraso";
                }

                int ganancia = pagoOriginal - multa;
                if (exito) {
                    enviosExitosos++;
                    jugador.recuperarPresupuesto(ganancia);
                    beneficiosAcumulados += ganancia;
                } else {
                    satisfaccionClientes -= 10;
                }

                System.out.println(mensaje);
                System.out.println("üí∞ Pago original: $" + pagoOriginal);
                System.out.println("üí∞ Multa por retraso: $" + multa);
                System.out.println("üí∞ Ganancia final: $" + ganancia);
                
                // Encontrar y liberar el veh√≠culo
                String idVehiculo = pedido.getTransporteAsignado().split(" ")[1];
                Vehiculo vehiculo = flota.stream()
                    .filter(v -> v.getId().equals(idVehiculo))
                    .findFirst()
                    .orElse(null);
                    
                if (vehiculo != null) {
                    vehiculo.asignarPedido(null);
                    vehiculo.aplicarDesgaste(); // Aplicar desgaste por completar el viaje
                }
                
                enviosTotales++;
                pedidosCompletados.add(pedido);
            }
        }
        
        // Eliminar pedidos completados
        pedidosEnCurso.removeAll(pedidosCompletados);
        
        // Procesar impuestos
        procesarImpuestos();
        
        // Generar nuevos veh√≠culos en el mercado
        generarVehiculosMercado();
        
        pedidos.clear();
        generarPedidosDia();
        mostrarEstadisticas();
    }

    /**
     * Verifica si el jugador est√° derrotado seg√∫n el modo de juego
     * @return true si el jugador est√° derrotado, false si no
     */
    private boolean jugadorDerrotado() {
        if (modoJuego.equals("libre")) {
            return false; // En modo libre nunca se pierde
        }
        return jugador.getPresupuesto() < 0; // Cambiado de <= 0 a < 0 para que termine cuando sea negativo
    }

    /**
     * Gasta dinero seg√∫n el modo de juego
     * @param cantidad Cantidad a gastar
     */
    private void gastarDinero(int cantidad) {
        if (!modoJuego.equals("libre")) {
            jugador.gastar(cantidad);
        }
    }

    /**
     * Recibe dinero seg√∫n el modo de juego
     * @param cantidad Cantidad a recibir
     */
    private void recibirDinero(int cantidad) {
        if (!modoJuego.equals("libre")) {
            jugador.recuperarPresupuesto(cantidad);
        }
    }

    public static void iniciarJuego() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("\n=== üöõ SKYLINE LOGISTICS üöõ ===");
        System.out.println("Bienvenido a tu nueva empresa de log√≠stica");
        
        // Solicitar nombre del jugador
        System.out.print("\nüìù Introduce tu nombre: ");
        String nombreJugador = scanner.nextLine();
        
        // Selecci√≥n del modo de juego
        System.out.println("\n=== üéÆ MODOS DE JUEGO üéÆ ===");
        System.out.println("1. Modo Libre");
        System.out.println("   - Sin restricciones de tiempo ni recursos");
        System.out.println("   - Balance inicial ilimitado");
        System.out.println("   - Ideal para experimentar y aprender");
        System.out.println("\n2. Modo Desaf√≠o");
        System.out.println("   - Gesti√≥n de recursos limitados");
        System.out.println("   - Balance inicial seg√∫n dificultad");
        System.out.println("   - Desaf√≠o de supervivencia empresarial");
        
        String modoJuego;
        while (true) {
            System.out.print("\nSelecciona el modo de juego (1-2): ");
            String opcion = scanner.nextLine();
            if (opcion.equals("1")) {
                modoJuego = "libre";
                break;
            } else if (opcion.equals("2")) {
                modoJuego = "desafio";
                break;
            } else {
                System.out.println("‚ùå Opci√≥n no v√°lida. Por favor, selecciona 1 o 2.");
            }
        }
        
        // Selecci√≥n de provincia
        System.out.println("\n=== üìç SELECCI√ìN DE PROVINCIA üìç ===");
        System.out.println("Selecciona la provincia donde establecer√°s tu almac√©n principal:");
        System.out.println("1. Madrid");
        System.out.println("2. Barcelona");
        System.out.println("3. Valencia");
        System.out.println("4. Sevilla");
        System.out.println("5. Bilbao");
        
        String provincia = "";
        while (provincia.isEmpty()) {
            System.out.print("\nSelecciona una provincia (1-5): ");
            String opcion = scanner.nextLine();
            switch (opcion) {
                case "1": provincia = "Madrid"; break;
                case "2": provincia = "Barcelona"; break;
                case "3": provincia = "Valencia"; break;
                case "4": provincia = "Sevilla"; break;
                case "5": provincia = "Bilbao"; break;
                default: System.out.println("‚ùå Opci√≥n no v√°lida. Por favor, selecciona una provincia v√°lida.");
            }
        }
        
        // Selecci√≥n de dificultad
        System.out.println("\n=== üéØ DIFICULTAD üéØ ===");
        System.out.println("Selecciona el nivel de dificultad:");
        System.out.println("1. F√°cil (50.000‚Ç¨ iniciales)");
        System.out.println("2. Medio (25.000‚Ç¨ iniciales)");
        System.out.println("3. Dif√≠cil (10.000‚Ç¨ iniciales)");
        
        String dificultad = "";
        while (dificultad.isEmpty()) {
            System.out.print("\nSelecciona la dificultad (1-3): ");
            String opcion = scanner.nextLine();
            switch (opcion) {
                case "1": dificultad = "easy"; break;
                case "2": dificultad = "medium"; break;
                case "3": dificultad = "hard"; break;
                default: System.out.println("‚ùå Opci√≥n no v√°lida. Por favor, selecciona una dificultad v√°lida.");
            }
        }
        
        // Crear e iniciar el juego
        JuegoLogistica juego = new JuegoLogistica(provincia, dificultad, nombreJugador, modoJuego);
        juego.jugar();
    }

    public void jugar() {
        System.out.println("\n=== üéÆ INICIANDO PARTIDA üéÆ ===");
        System.out.println("Modo de juego: " + (modoJuego.equals("libre") ? "Libre" : "Desaf√≠o"));
        System.out.println("Dificultad: " + dificultad);
        System.out.println("Almac√©n principal: " + almacenPrincipal);
        System.out.println("Balance inicial: " + jugador.getPresupuesto() + "‚Ç¨");
        
        // Generar pedidos iniciales
        generarPedidosDia();
        
        while (!jugadorDerrotado()) {
            mostrarMenuPrincipal();
            procesarOpcion(scanner.nextLine());
        }
        
        mostrarEstadisticas();
    }

    /**
     * Verifica si se han alcanzado los objetivos de la campa√±a
     * @return true si se han alcanzado los objetivos, false si no
     */
    private boolean verificarObjetivosCampa√±a() {
        if (!modoJuego.equals("campa√±a")) {
            return false;
        }

        // Obtener multiplicador seg√∫n la dificultad
        double multiplicador = 1.0;
        switch (dificultad) {
            case "easy":
                multiplicador = 0.8;
                break;
            case "hard":
                multiplicador = 1.2;
                break;
        }

        // Verificar objetivos m√≠nimos
        Map<String, Integer> objetivosMinimos = OBJETIVOS_CAMPANA.get("minimos");
        boolean objetivosMinimosAlcanzados = 
            diaActual >= (int)(objetivosMinimos.get("dias") * multiplicador) &&
            enviosExitosos >= (int)(objetivosMinimos.get("enviosExitosos") * multiplicador) &&
            satisfaccionClientes >= (int)(objetivosMinimos.get("satisfaccion") * multiplicador) &&
            beneficiosAcumulados >= (int)(objetivosMinimos.get("beneficios") * multiplicador);

        // Verificar objetivos avanzados
        Map<String, Integer> objetivosAvanzados = OBJETIVOS_CAMPANA.get("avanzados");
        boolean objetivosAvanzadosAlcanzados = 
            diaActual >= (int)(objetivosAvanzados.get("dias") * multiplicador) &&
            enviosExitosos >= (int)(objetivosAvanzados.get("enviosExitosos") * multiplicador) &&
            satisfaccionClientes >= (int)(objetivosAvanzados.get("satisfaccion") * multiplicador) &&
            beneficiosAcumulados >= (int)(objetivosAvanzados.get("beneficios") * multiplicador);

        // Verificar objetivos √©lite
        Map<String, Integer> objetivosElite = OBJETIVOS_CAMPANA.get("elite");
        boolean objetivosEliteAlcanzados = 
            diaActual >= (int)(objetivosElite.get("dias") * multiplicador) &&
            enviosExitosos >= (int)(objetivosElite.get("enviosExitosos") * multiplicador) &&
            satisfaccionClientes >= (int)(objetivosElite.get("satisfaccion") * multiplicador) &&
            beneficiosAcumulados >= (int)(objetivosElite.get("beneficios") * multiplicador);

        // Mostrar progreso
        System.out.println("\n=== üìä PROGRESO DE LA CAMPA√ëA üìä ===");
        System.out.println("Objetivos M√≠nimos: " + (objetivosMinimosAlcanzados ? "‚úÖ" : "‚ùå"));
        System.out.println("Objetivos Avanzados: " + (objetivosAvanzadosAlcanzados ? "‚úÖ" : "‚ùå"));
        System.out.println("Objetivos √âlite: " + (objetivosEliteAlcanzados ? "‚úÖ" : "‚ùå"));

        return objetivosMinimosAlcanzados;
    }
} 