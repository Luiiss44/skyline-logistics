package controller;

import incidente.tipos.*;
import incidente.core.IncidenteLogistico;
import decorator.base.Envio;
import decorator.implementations.EnvioBasico;
import decorator.decorators.*;
import strategy.core.EstrategiaEnvio;
import strategy.implementations.*;
import strategy.context.EnvioContext;
import java.util.Scanner;
import java.util.Random;

/**
 * Clase principal que orquesta el juego de log칤stica.
 * Gestiona la interacci칩n con el usuario y coordina los diferentes componentes.
 */
public class JuegoLogistica {
    private static final Scanner scanner = new Scanner(System.in);
    private static final Random random = new Random();
    private static int presupuesto = 100000;
    private static int turno = 1;
    private static boolean juegoActivo = true;

    public static void main(String[] args) {
        System.out.println("游뚴 Bienvenido a Skyline Logistics 游뚴");
        System.out.println("Tu presupuesto inicial es: $" + presupuesto);

        while (juegoActivo) {
            mostrarMenuPrincipal();
        }

        System.out.println("춰Gracias por jugar a Skyline Logistics!");
    }

    private static void mostrarMenuPrincipal() {
        System.out.println("\n=== Turno " + turno + " ===");
        System.out.println("Presupuesto actual: $" + presupuesto);
        System.out.println("1. Crear nuevo env칤o");
        System.out.println("2. Gestionar incidente");
        System.out.println("3. Ver estad칤sticas");
        System.out.println("4. Salir");
        System.out.print("Selecciona una opci칩n: ");

        int opcion = scanner.nextInt();
        scanner.nextLine(); // Limpiar buffer

        switch (opcion) {
            case 1:
                crearEnvio();
                break;
            case 2:
                gestionarIncidente();
                break;
            case 3:
                mostrarEstadisticas();
                break;
            case 4:
                juegoActivo = false;
                break;
            default:
                System.out.println("Opci칩n no v치lida");
        }
    }

    private static void crearEnvio() {
        System.out.println("\n=== Crear Nuevo Env칤o ===");
        System.out.print("Origen: ");
        String origen = scanner.nextLine();
        System.out.print("Destino: ");
        String destino = scanner.nextLine();
        System.out.print("Peso (kg): ");
        double peso = scanner.nextDouble();
        scanner.nextLine();

        // Crear env칤o b치sico
        Envio envio = new EnvioBasico(origen, destino, peso);

        // Seleccionar estrategia
        System.out.println("\nSelecciona una estrategia de env칤o:");
        System.out.println("1. R치pida (2x costo, 1 d칤a)");
        System.out.println("2. Econ칩mica (0.8x costo, 5 d칤as)");
        System.out.println("3. Alternativa (1.5x costo, 3 d칤as)");
        int estrategia = scanner.nextInt();
        scanner.nextLine();

        EstrategiaEnvio estrategiaSeleccionada;
        switch (estrategia) {
            case 1:
                estrategiaSeleccionada = new EstrategiaRapida();
                break;
            case 2:
                estrategiaSeleccionada = new EstrategiaEconomica();
                break;
            case 3:
                estrategiaSeleccionada = new EstrategiaAlternativa();
                break;
            default:
                System.out.println("Estrategia no v치lida, usando econ칩mica por defecto");
                estrategiaSeleccionada = new EstrategiaEconomica();
        }

        // Aplicar decoradores
        System.out.println("\nSelecciona servicios adicionales (0 para terminar):");
        System.out.println("1. Seguro (+10%)");
        System.out.println("2. Refrigeraci칩n (+20%, +1 d칤a)");
        System.out.println("3. Urgente (+50%, -2 d칤as)");

        int servicio;
        do {
            servicio = scanner.nextInt();
            scanner.nextLine();
            switch (servicio) {
                case 1:
                    envio = new SeguroDecorator(envio);
                    break;
                case 2:
                    envio = new RefrigeracionDecorator(envio);
                    break;
                case 3:
                    envio = new UrgenteDecorator(envio);
                    break;
            }
        } while (servicio != 0);

        // Calcular costos y tiempos
        EnvioContext context = new EnvioContext(estrategiaSeleccionada);
        double costo = context.calcularCosto(envio);
        int tiempo = context.calcularTiempoEstimado(envio);

        System.out.println("\nResumen del env칤o:");
        System.out.println("Descripci칩n: " + envio.getDescripcion());
        System.out.println("Estrategia: " + context.getDescripcionEstrategia());
        System.out.println("Costo: $" + costo);
        System.out.println("Tiempo estimado: " + tiempo + " d칤as");

        if (costo <= presupuesto) {
            presupuesto -= costo;
            System.out.println("Env칤o creado exitosamente!");
        } else {
            System.out.println("No tienes suficiente presupuesto para este env칤o");
        }
    }

    private static void gestionarIncidente() {
        System.out.println("\n=== Gestionar Incidente ===");
        System.out.println("Selecciona el tipo de incidente:");
        System.out.println("1. Aver칤a de cami칩n");
        System.out.println("2. Huelga de transporte");
        System.out.println("3. Condiciones clim치ticas adversas");
        int tipo = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Descripci칩n del incidente: ");
        String descripcion = scanner.nextLine();

        IncidenteLogistico incidente;
        switch (tipo) {
            case 1:
                incidente = new AveriaCamion(descripcion);
                break;
            case 2:
                incidente = new HuelgaTransporte(descripcion);
                break;
            case 3:
                incidente = new ClimaAdverso(descripcion);
                break;
            default:
                System.out.println("Tipo de incidente no v치lido");
                return;
        }

        incidente.resolver();
        System.out.println("Incidente resuelto: " + incidente.getSolucion());
    }

    private static void mostrarEstadisticas() {
        System.out.println("\n=== Estad칤sticas ===");
        System.out.println("Turno actual: " + turno);
        System.out.println("Presupuesto restante: $" + presupuesto);
        System.out.println("Env칤os realizados: " + (turno - 1));
    }

    private static void finalizarTurno() {
        turno++;
        // Simular eventos aleatorios
        if (random.nextDouble() < 0.3) { // 30% de probabilidad de incidente
            gestionarIncidente();
        }
    }
} 